#!/usr/bin/env php
<?php
// Find and initialize Composer
$files = array(
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
);

foreach ($files as $file) {
    if (file_exists($file)) {
        require_once $file;
        break;
    }
}

if (!class_exists('Composer\Autoload\ClassLoader', false)) {
    die(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE (' . $APP_INCLUDE . ") does not exist.\n");
    }

    require_once $APP_INCLUDE;
}

$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_DATABASE = getenv('REDIS_DATABASE');
$REDIS_NAMESPACE = getenv('REDIS_NAMESPACE');
$REDIS_PASSWORD = getenv('REDIS_PASSWORD') == '' ? null : getenv('REDIS_PASSWORD');

$LOG_HANDLER = getenv('LOGHANDLER');
$LOG_HANDLER_TARGET = getenv('LOGHANDLERTARGET');

$logger = new MonologInit\MonologInit($LOG_HANDLER, $LOG_HANDLER_TARGET);

if (!empty($REDIS_BACKEND)) {
    Resque::setBackend($REDIS_BACKEND, $REDIS_DATABASE, $REDIS_NAMESPACE, $REDIS_PASSWORD);
}

$logLevel = Resque_Worker::LOG_NONE;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = Resque_Worker::LOG_NORMAL;
} elseif (!empty($VVERBOSE)) {
    $logLevel = Resque_Worker::LOG_VERBOSE;
}

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$PIDFILE = getenv('PIDFILE');

$count = 1;
$COUNT = getenv('COUNT');
if (!empty($COUNT) && $COUNT > 1) {
    $count = $COUNT;
}

if ($count > 1) {
    for ($i = 0; $i < $count; ++$i) {
        $pid = pcntl_fork();
        if ($pid == -1) {
            die("Could not fork worker " . $i . "\n");
        } elseif (!$pid) { // Child, start the worker
            if ($PIDFILE) {
                if ($i == 0) {
                    writePidFile($PIDFILE);
                }
                writePidFile($PIDFILE . '.child.' . ($i + 1));
            }
            startWorker($QUEUE, $logLevel, $logger, $interval);
            break;
        }
    }
} else { // Start a single worker

    if ($PIDFILE) {
        writePidFile($PIDFILE);
    }

    startWorker($QUEUE, $logLevel, $logger, $interval);
}

function startWorker($QUEUE, $logLevel, $logger, $interval)
{
    $queues = explode(',', $QUEUE);
    $worker = new Resque_Worker($queues);
    $worker->registerLogger($logger);
    $worker->logLevel = $logLevel;
    $worker->work($interval);
}

function writePidFile($fullPath, $pid = null)
{
    if (is_null($pid)) {
        $pid = getmypid();
    }
    file_put_contents($fullPath, $pid) or die('Could not write PID information to ' . $fullPath);
}