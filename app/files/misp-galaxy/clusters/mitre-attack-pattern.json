{
  "authors": [
    "MITRE"
  ],
  "category": "attack-pattern",
  "description": "ATT&CK tactic",
  "name": "Attack Pattern",
  "source": "https://github.com/mitre/cti",
  "type": "mitre-attack-pattern",
  "uuid": "dcb864dc-775f-11e7-9fbb-1f41b4996683",
  "values": [
    {
      "description": "Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: User interface, Process monitoring, Process use of network, Packet capture, Netflow/Enclave netflow, Network protocol analysis",
      "meta": {
        "mitre_data_sources": [
          "User interface",
          "Process monitoring",
          "Process use of network",
          "Packet capture",
          "Netflow/Enclave netflow",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1048",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "a19e86f8-1c0a-4fea-8407-23b73d615776"
      },
      "value": "Exfiltration Over Alternative Protocol"
    },
    {
      "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1071",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "355be19c-ffc9-46d5-8d50-d6a036c675b6"
      },
      "value": "Standard Application Layer Protocol"
    },
    {
      "description": "Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>$HOME/Library/LaunchAgents</code>[[Citation: AppleDocs Launch Agent Daemons]][[Citation: OSX Keydnap malware]][[Citation: Antiquated Mac Malware]].  These launch agents have property list files which point to the executables that will be launched[[Citation: OSX.Dok Malware]].\n \nAdversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories [[Citation: Sofacy Komplex Trojan]] [[Citation: Methods of Mac Malware Persistence]]. The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in[[Citation: OSX Malware Detection]][[Citation: OceanLotus for OS X]]. They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).\n\nDetection: Monitor Launch Agent creation through additional plist files and utilities such as Objective-See’s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.\n\nPlatforms: MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1159",
          "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
          "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update",
          "https://www.synack.com/wp-content/uploads/2016/03/RSA%20OSX%20Malware.pdf"
        ],
        "uuid": "12f399b0-d9de-4f60-a262-22c21baae140"
      },
      "value": "Launch Agent"
    },
    {
      "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.\n\nDetection: Monitor file access on removable media. Detect processes that execute when removable media is mounted.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Data loss prevention",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Data loss prevention"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1092"
        ],
        "uuid": "64196062-5210-42c3-9a02-563a0d1797ef"
      },
      "value": "Communication Through Removable Media"
    },
    {
      "description": "Windows uses access tokens to determine the ownership of a running process.  A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process.  When this occurs, the process also takes on the security context associated with the new token.  For example, Microsoft promotes the use of access tokens as a security best practice.  Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command <code>runas</code>. [[Citation: Microsoft runas]]\n  \nAdversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection.   An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing.  An adversary must already be in a privileged user context (i.e. administrator) to steal a token.  However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level.[[Citation: Pentestlab Token Manipulation]]\n\nAdversaries can also create spoofed access tokens if they know the credentials of a user.  Any standard user can use the <code>runas</code> command, and the Windows API functions, to do this; it does not require access to an administrator account.\n\nLastly, an adversary can use a spoofed token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\n\nMetasploit’s Meterpreter payload allows arbitrary token stealing and uses token stealing to escalate privileges. [[Citation: Metasploit access token]]  The Cobalt Strike beacon payload allows arbitrary token stealing and can also create tokens. [[Citation: Cobalt Strike Access Token]]\n\nDetection: If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity.  Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows.[[Citation: Microsoft Command-line Logging]]\n\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.  \n\nThere are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., <code>LogonUser</code>[[Citation: Microsoft LogonUser]], <code>DuplicateTokenEx</code>[[Citation: Microsoft DuplicateTokenEx]], and <code>ImpersonateLoggedOnUser</code>[[Citation: Microsoft ImpersonateLoggedOnUser]]).  Please see the referenced Windows API pages for more information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nEffective Permissions: SYSTEM\n\nContributors: Tom Ueltschi @c_APT_ure",
      "meta": {
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1134",
          "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
          "https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials/",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx",
          "https://www.offensive-security.com/metasploit-unleashed/fun-incognito/",
          "https://technet.microsoft.com/en-us/library/bb490994.aspx",
          "https://pentestlab.blog/2017/04/03/token-manipulation/",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx"
        ],
        "uuid": "a611377b-ff2b-450c-b065-19026fa63488"
      },
      "value": "Access Token Manipulation"
    },
    {
      "description": "Adversaries may communicate using a custom command and control protocol instead of using existing Standard Application Layer Protocol to encapsulate commands. Implementations could mimic well-known protocols.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1094",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "f72eb8a8-cd4c-461d-a814-3f862befbf00"
      },
      "value": "Custom Command and Control Protocol"
    },
    {
      "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n===Services===\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n===Executable Installers===\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.[[Citation: Mozilla Firefox Installer DLL Hijack]][[Citation: Seclists Kanthak 7zip Installer]]\n\nDetection: Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to [[Discovery]] or other adversary techniques.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Services, Process command-line parameters\n\nEffective Permissions: SYSTEM, User, Administrator\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Services",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1044",
          "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/",
          "http://seclists.org/fulldisclosure/2015/Dec/34"
        ],
        "uuid": "0ca7beef-9bbc-4e35-97cf-437384ddce6a"
      },
      "value": "File System Permissions Weakness"
    },
    {
      "description": "Process hollowing occurs when a process is created in a suspended state and the process's memory is replaced with the code of a second program so that the second program runs instead of the original program. Windows and process monitoring tools believe the original process is running, whereas the actual program running is different.DLL Injection to evade defenses and detection analysis of malicious process execution by launching adversary-controlled code under the context of a legitimate process.\n\nDetection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior.\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, API monitoring",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1093",
          "http://www.autosectools.com/process-hollowing.pdf"
        ],
        "uuid": "1c338d0f-a65e-4073-a5c1-c06878849f21"
      },
      "value": "Process Hollowing"
    },
    {
      "description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\n\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit[[Citation: Metasploit]], Veil[[Citation: Veil]], and PowerSploit[[Citation: Powersploit]] are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell.[[Citation: Alperovitch 2014]]\n\nDetection: Scripting may be common on admin, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information [[Discovery]], [[Collection]], or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Process monitoring, File monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1064",
          "http://www.metasploit.com",
          "http://blog.crowdstrike.com/deep-thought-chinese-targeting-national-security-think-tanks/",
          "https://www.veil-framework.com/framework/",
          "https://github.com/mattifestation/PowerSploit"
        ],
        "uuid": "7fd87010-3a00-4da3-b905-410525e8ec44"
      },
      "value": "Scripting"
    },
    {
      "description": "Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.\n\nDetection: Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1025"
        ],
        "uuid": "1b7ba276-eedc-4951-a762-0ceea2c030ec"
      },
      "value": "Data from Removable Media"
    },
    {
      "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.[[Citation: Wikipedia Code Signing]] However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries[[Citation: Janicab]]. The certificates used during an operation may be created, forged, or stolen by the adversary.[[Citation: Securelist Digital Certificates]][[Citation: Symantec Digital Certificates]]\n\nCode signing to verify software on first run can be used on modern Windows and MacOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform.[[Citation: Wikipedia Code Signing]]\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.\n\nDetection: Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, MacOS, OS X\n\nData Sources: Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1116",
          "http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates",
          "https://securelist.com/blog/security-policies/68593/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/",
          "http://www.thesafemac.com/new-signed-malware-called-janicab/",
          "https://en.wikipedia.org/wiki/Code%20signing"
        ],
        "uuid": "1b84d551-6de8-4b96-9930-d177677c3b1d"
      },
      "value": "Code Signing"
    },
    {
      "description": "The configurations for how applications run on macOS and OS X are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window [[Citation: Antiquated Mac Malware]].\n\nDetection: Plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the <code>apple.awt.UIElement</code> or any other suspicious plist tag in plist files and flag them.\n\nPlatforms: MacOS, OS X\n\nData Sources: File monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1143",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"
        ],
        "uuid": "52619537-a5c4-4b7b-aac0-6f214d0dfeba"
      },
      "value": "Hidden Window"
    },
    {
      "description": "Rootkits are programs that hide the existence of malware by intercepting and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the System Firmware.[[Citation: Wikipedia Rootkit]]\n\nAdversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components.\n\nDetection: Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR.[[Citation: Wikipedia Rootkit]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: BIOS, MBR, System calls",
      "meta": {
        "mitre_data_sources": [
          "BIOS",
          "MBR",
          "System calls"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1014",
          "https://en.wikipedia.org/wiki/Rootkit"
        ],
        "uuid": "0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b"
      },
      "value": "Rootkit"
    },
    {
      "description": "Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items[[Citation: Startup Items]]. This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, <code>/Library/StartupItems</code> isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. \n\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism[[Citation: Methods of Mac Malware Persistence]]. Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.\n\nDetection: The <code>/Library/StartupItems</code> folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist. Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.\n\nPlatforms: MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring\n\nEffective Permissions: root",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1165",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ],
        "uuid": "c3dc8707-c1cd-4ce0-add5-5302670770b3"
      },
      "value": "Startup Items"
    },
    {
      "description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms.cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.\n\nDetection: Command-line interface activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1059",
          "https://en.wikipedia.org/wiki/Command-line%20interface"
        ],
        "uuid": "7385dfaf-6886-4229-9ecd-6fd678040830"
      },
      "value": "Command-Line Interface"
    },
    {
      "description": "Data exfiltration is performed over the [[Command and Control]] channel.  Data is encoded into the normal communications channel using the same protocol as command and control communications.\n\nDetection: Detection for command and control applies. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: User interface, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "User interface",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1041",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "92d7da27-2d91-488e-a00c-059dc162766d"
      },
      "value": "Exfiltration Over Command and Control Channel"
    },
    {
      "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.\n\nDetection: Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from [[Discovery]] of the system and network information or [[Lateral Movement]] to the originating process may also yield useful data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Netflow/Enclave netflow, Network device logs, Network protocol analysis, Packet capture, Process use of network",
      "meta": {
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Network device logs",
          "Network protocol analysis",
          "Packet capture",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1104"
        ],
        "uuid": "84e02621-8fdf-470f-bd58-993bb6a89d91"
      },
      "value": "Multi-Stage Channels"
    },
    {
      "description": "Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <code>~/Library/Keychains/</code>,<code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.[[Citation: Wikipedia keychain]] The <code>security</code> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.\n\nTo manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault.[[Citation: External to DA, the OS X Way]] By default, the passphrase for the keychain is the user’s logon credentials.\n\nDetection: Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.\n\nPlatforms: MacOS, OS X\n\nData Sources: System calls, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "System calls",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1142",
          "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way",
          "https://en.wikipedia.org/wiki/Keychain%20(software)"
        ],
        "uuid": "38cfae40-42c8-431e-8cb7-0f14b2ce0e86"
      },
      "value": "Keychain"
    },
    {
      "description": "Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.\n\nAdversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.Valid Accounts in use by adversaries may help to catch the result of user input interception if new techniques are used.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Windows Registry, Kernel drivers, Process monitoring, API monitoring\n\nContributors: John Lambert, Microsoft Threat Intelligence Center",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "Kernel drivers",
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1056",
          "http://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/",
          "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
        ],
        "uuid": "bb5a00de-e086-4859-a231-fa793f6797e2"
      },
      "value": "Input Capture"
    },
    {
      "description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.[[Citation: MSDN Regsvcs]][[Citation: MSDN Regasm]]\n\nAdversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.[[Citation: SubTee GitHub All The Things Application Whitelisting Bypass]]\n\nDetection: Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, Process command-line parameters\n\nContributors: Casey Smith",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1121",
          "https://msdn.microsoft.com/en-us/library/04za0hca.aspx",
          "https://msdn.microsoft.com/en-us/library/tzat5yw6.aspx",
          "https://github.com/subTee/AllTheThings"
        ],
        "uuid": "215190a9-9f02-4e83-bb5f-e0589965a302"
      },
      "value": "Regsvcs/Regasm"
    },
    {
      "description": "There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\n\n===MSBuild===\n\nMSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It takes XML formatted project files that define requirements for building various platforms and configurations.[[Citation: MSDN MSBuild]] \n\nAdversaries can use MSBuild to proxy execution of code through a trusted Windows utility. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into the XML project file.[[Citation: MSDN MSBuild Inline Tasks]] MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application whitelisting defenses that are configured to allow MSBuild.exe execution.[[Citation: SubTee GitHub All The Things Application Whitelisting Bypass]]\n\n===DNX===\n\nThe .NET Execution Environment (DNX), dnx.exe, is a software development kit packaged with Visual Studio Enterprise. It was retired in favor of .NET Core CLI in 2016.[[Citation: Microsoft Migrating from DNX]] DNX is not present on standard builds of Windows and may only be present on developer workstations using older versions of .NET Core and ASP.NET Core 1.0. The dnx.exe executable is signed by Microsoft. \n\nAn adversary can use dnx.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for DNX.[[Citation: engima0x3 DNX Bypass]]\n\n===RCSI===\n\nThe rcsi.exe utility is a non-interactive command-line interface for C# that is similar to csi.exe. It was provided within an early version of the Roslyn .NET Compiler Platform but has since been deprecated for an integrated solution.[[Citation: Microsoft Roslyn CPT RCSI]] The rcsi.exe binary is signed by Microsoft.[[Citation: engima0x3 RCSI Bypass]]\n\nC# .csx script files can be written and executed with rcsi.exe at the command-line. An adversary can use rcsi.exe to proxy execution of arbitrary code to bypass application whitelisting policies that do not account for execution of rcsi.exe.[[Citation: engima0x3 RCSI Bypass]]\n\n===WinDbg/CDB===\n\nWinDbg is a Microsoft Windows kernel and user-mode debugging utility. The Microsoft Console Debugger (CDB) cdb.exe is also user-mode debugger. Both utilities are included in Windows software development kits and can be used as standalone tools.[[Citation: Microsoft Debugging Tools for Windows]] They are commonly used in software development and reverse engineering and may not be found on typical Windows systems. Both WinDbg.exe and cdb.exe binaries are signed by Microsoft.\n\nAn adversary can use WinDbg.exe and cdb.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for execution of those utilities.[[Citation: Exploit Monday WinDbg]]\n\nIt is likely possible to use other debuggers for similar purposes, such as the kernel-mode debugger kd.exe, which is also signed by Microsoft.\n\nDetection: The presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.\n\nUse process monitoring to monitor the execution and arguments of MSBuild.exe, dnx.exe, rcsi.exe, WinDbg.exe, and cdb.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.\n\nPlatforms: Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring\n\nContributors: Casey Smith",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1127",
          "https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/",
          "https://msdn.microsoft.com/library/dd722601.aspx",
          "https://blogs.msdn.microsoft.com/visualstudio/2011/10/19/introducing-the-microsoft-roslyn-ctp/",
          "https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/index",
          "https://github.com/subTee/AllTheThings",
          "https://msdn.microsoft.com/library/dd393574.aspx",
          "http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
          "https://enigma0x3.net/2016/11/21/bypassing-application-whitelisting-by-using-rcsi-exe/",
          "https://docs.microsoft.com/en-us/dotnet/core/migration/from-dnx"
        ],
        "uuid": "ff25900d-76d5-449b-a351-8824e62fc81b"
      },
      "value": "Trusted Developer Utilities"
    },
    {
      "description": "Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1016"
        ],
        "uuid": "707399d6-ab3e-4963-9315-d9d3818cd6a0"
      },
      "value": "System Network Configuration Discovery"
    },
    {
      "description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. The account used to create the task must be in the Administrators group on the local system. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on.Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters\n\nEffective Permissions: SYSTEM, Administrator",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1053",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://technet.microsoft.com/en-us/library/cc785125.aspx"
        ],
        "uuid": "35dd844a-b219-4e2b-a6bb-efa9a75995a9"
      },
      "value": "Scheduled Task"
    },
    {
      "description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow compatibility of programs as Windows updates and changes its code. For example, application shimming feature that allows programs that were created for Windows XP to work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses API hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code>\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code>\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC) (RedirectEXE), inject DLLs into processes (InjectDll), and intercept memory addresses (GetProcAddress). Utilizing these shims, an adversary can perform several malicious acts, such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.\n\nDetection: There are several public tools available that will detect shims that are currently available[[Citation: Black Hat 2015 App Shim]]:\n\n* Shim-Process-Scanner - checks memory of every running process for any Shim flags\n* Shim-Detector-Lite - detects installation of custom shim databases\n* Shim-Guard - monitors registry for any shim installations\n* ShimScanner - forensic tool to find active shims in memory\n* ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)\n\nMonitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Loaded DLLs, System calls, Windows Registry, Process Monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Loaded DLLs",
          "System calls",
          "Windows Registry",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1138",
          "https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf"
        ],
        "uuid": "1e16e6fe-c0d9-4d9a-b112-9ac5ce3bdfdc"
      },
      "value": "Application Shimming"
    },
    {
      "description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB)[[Citation: Wikipedia SMB]] and Remote Procedure Call Service (RPCS)[[Citation: TechNet RPC]] for remote access. RPCS operates over port 135.[[Citation: MSDN WMI]]\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for [[Discovery]] and remote [[Execution]] of files as part of [[Lateral Movement]].[[Citation: FireEye WMI 2015]]\n\nDetection: Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior.[[Citation: FireEye WMI 2015]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs, Netflow/Enclave netflow, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1047",
          "https://msdn.microsoft.com/en-us/library/aa394582.aspx",
          "https://en.wikipedia.org/wiki/Server%20Message%20Block",
          "https://technet.microsoft.com/en-us/library/cc787851.aspx",
          "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"
        ],
        "uuid": "01a5a209-b94c-450b-b7f9-946497d91055"
      },
      "value": "Windows Management Instrumentation"
    },
    {
      "description": "Data or executables may be stored in New Technology File System (NTFS) partition metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.[[Citation: Journey into IR ZeroAccess NTFS EA]]\n\nThe NTFS format has a feature called Extended Attributes (EA), which allows data to be stored as an attribute of a file or folder.[[Citation: Microsoft File Streams]]\n\nDetection: Forensic techniques exist to identify information stored in EA.[[Citation: Journey into IR ZeroAccess NTFS EA]] It may be possible to monitor NTFS for writes or reads to NTFS EA or to regularly scan for the presence of modified information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Kernel drivers",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Kernel drivers"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1096",
          "http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html",
          "http://msdn.microsoft.com/en-us/library/aa364404"
        ],
        "uuid": "f2d44246-91f1-478a-b6c8-1227e0ca109d"
      },
      "value": "NTFS Extended Attributes"
    },
    {
      "description": "Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>/System/Library/LaunchDaemons</code> and <code>/Library/LaunchDaemons</code>[[Citation: AppleDocs Launch Agent Daemons]]. These LaunchDaemons have property list files which point to the executables that will be launched[[Citation: Methods of Mac Malware Persistence]].\n \nAdversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories[[Citation: OSX Malware Detection]]. The daemon name may be disguised by using a name from a related operating system or benign software [[Citation: WireLurker]]. Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root.\n \nThe plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.\n\nDetection: Monitor Launch Daemon creation through additional plist files and utilities such as Objective-See's Knock Knock application.\n\nPlatforms: MacOS, OS X\n\nData Sources: Process Monitoring, File monitoring\n\nEffective Permissions: root",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1160",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
          "https://www.paloaltonetworks.com/content/dam/pan/en%20US/assets/pdf/reports/Unit%2042/unit42-wirelurker.pdf",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://www.synack.com/wp-content/uploads/2016/03/RSA%20OSX%20Malware.pdf"
        ],
        "uuid": "eddadd9a-8322-490e-8666-58662beb3d18"
      },
      "value": "Launch Daemon"
    },
    {
      "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.\n\n===Windows===\n\nAn example command that would obtain details on processes is \"tasklist\" using the Tasklist utility.\n\n===Mac and Linux===\n\nIn Mac and Linux, this is accomplished with the <code>ps</code> command.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1057"
        ],
        "uuid": "8f4a33ec-8b1f-4b80-a2f6-642b2e479580"
      },
      "value": "Process Discovery"
    },
    {
      "description": "The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.[[Citation: Wikipedia BIOS]][[Citation: Wikipedia UEFI]][[Citation: About UEFI]]\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.\n\nDetection: System firmware manipulation may be detected.[[Citation: MITRE Trustworthy Firmware Measurement]] Dump and inspect BIOS images on vulnerable systems and compare against known good images.[[Citation: MITRE Copernicus]] Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior.\n\nLikewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed.[[Citation: McAfee CHIPSEC Blog]][[Citation: Github CHIPSEC]][[Citation: Intel HackingTeam UEFI Rootkit]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: API monitoring, BIOS, EFI\n\nContributors: Ryan Becwar",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "BIOS",
          "EFI"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1019",
          "https://en.wikipedia.org/wiki/Unified%20Extensible%20Firmware%20Interface",
          "http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html",
          "http://www.uefi.org/about",
          "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research",
          "http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about",
          "https://en.wikipedia.org/wiki/BIOS",
          "https://github.com/chipsec/chipsec",
          "https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/"
        ],
        "uuid": "6856ddd6-2df3-4379-8b87-284603c189c3"
      },
      "value": "System Firmware"
    },
    {
      "description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n\nDetection: Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders.[[Citation: TechNet Autoruns]] Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.\n\nChanges to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [[Command and Control]], learning details about the environment through [[Discovery]], and [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1060",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "http://msdn.microsoft.com/en-us/library/aa376977"
        ],
        "uuid": "9422fc14-1c43-410d-ab0f-a709b76c72dc"
      },
      "value": "Registry Run Keys / Start Folder"
    },
    {
      "description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with New Service and Modify Existing Service during service persistence or privilege escalation.\n\nDetection: Changes to service Registry entries and command-line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1035"
        ],
        "uuid": "f44731de-ea9f-406d-9b83-30ecbb9b4392"
      },
      "value": "Service Execution"
    },
    {
      "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1065",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "c848fcf7-6b62-4bde-8216-b6c157d48da0"
      },
      "value": "Uncommonly Used Port"
    },
    {
      "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, Scripting, PowerShell, or by using utilities present on the system.\n\nOne such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.certutil.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters\n\nContributors: Matthew Demaske, Adaptforward",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1140",
          "https://blog.malwarebytes.com/cybercrime/social-engineering-cybercrime/2017/03/new-targeted-attack-saudi-arabia-government/"
        ],
        "uuid": "673c3a5d-0e07-42bb-8e6f-9aa2322987d8"
      },
      "value": "Deobfuscate/Decode Files or Information"
    },
    {
      "description": "Adversaries with a sufficient level of access may create a local system or domain account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.\n\nThe <code>net user</code> commands can be used to create a local or domain account.\n\nDetection: Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller.[[Citation: Microsoft User Creation Event]] Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.\n\nPlatforms: Windows 10, Windows Server 2012, Windows 7, Windows 8, Windows Server 2008 R2, Windows Server 2012 R2, Windows 8.1, Windows Server 2003, Windows Server 2008, Windows XP, Windows Server 2003 R2, Windows Vista, Linux, MacOS, OS X\n\nData Sources: Process Monitoring, Process command-line parameters, Authentication logs, Windows event logs",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring",
          "Process command-line parameters",
          "Authentication logs",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows 10",
          "Windows Server 2012",
          "Windows 7",
          "Windows 8",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows 8.1",
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows XP",
          "Windows Server 2003 R2",
          "Windows Vista",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1136",
          "https://docs.microsoft.com/windows/device-security/auditing/event-4720"
        ],
        "uuid": "f2d47680-b65a-4354-8a69-79c150fd2bd5"
      },
      "value": "Create Account"
    },
    {
      "description": "Collected data is staged in a central location or directory prior to Data Compressed or Data Encrypted.\n\nInteractive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nDetection: Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1074"
        ],
        "uuid": "7dd95ff6-712e-4056-9626-312ea4ab4c5e"
      },
      "value": "Data Staged"
    },
    {
      "description": "During the boot process, macOS and Linux both execute <code>source /etc/rc.common</code>, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts[[Citation: Startup Items]]. In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.\n\nAdversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user[[Citation: Methods of Mac Malware Persistence]].\n\nDetection: The <code>/etc/rc.common</code> file can be monitored to detect changes from the company policy. Monitor process execution resulting from the rc.common script for unusual or unknown applications or behavior.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1163",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ],
        "uuid": "5910567d-e430-41f7-b465-f1419449b462"
      },
      "value": "Rc.common"
    },
    {
      "description": "In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.[[Citation: OS X Keychain]][[Citation: External to DA, the OS X Way]] Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.[[Citation: OS X Keychain]]\n\nIf an adversary can obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.[[Citation: OS X Keychain]][[Citation: OSX Keydnap malware]]\n\nPlatforms: OS X\n\nData Sources: Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1167",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
          "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way",
          "http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain"
        ],
        "uuid": "6ebe5b09-ff7d-48c8-96d3-8a9429ba5d48"
      },
      "value": "Securityd Memory"
    },
    {
      "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions.Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution.\n\nDetection: Monitor service creation through changes in the Registry and common utilities using command-line invocation. New, benign services may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters\n\nEffective Permissions: SYSTEM",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1050",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://technet.microsoft.com/en-us/library/cc772408.aspx"
        ],
        "uuid": "478aa214-2ca7-4ec0-9978-18798e514790"
      },
      "value": "New Service"
    },
    {
      "description": "Windows shared drive and Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command.Windows Admin Shares. SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, Process command-line parameters, Packet capture, Authentication logs",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Packet capture",
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1126",
          "https://technet.microsoft.com/bb490717.aspx"
        ],
        "uuid": "e7eab98d-ae11-4491-bd28-a53ba875865a"
      },
      "value": "Network Share Connection Removal"
    },
    {
      "description": "DLL injection is used to run code in the context of another process by causing the other process to load and execute code. Running code in the context of another process provides adversaries many benefits, such as access to the process's memory and permissions. It also allows adversaries to mask their actions under a legitimate process. A more sophisticated kind of DLL injection, reflective DLL injection, loads code without calling the normal Windows API calls, potentially bypassing DLL load monitoring. Numerous methods of DLL injection exist on Windows, including modifying the Registry, creating remote threads, Windows hooking APIs, and DLL pre-loading.PowerShell with tools such as PowerSploit,[[Citation: Powersploit]] so additional PowerShell monitoring may be required to cover known implementations of this behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: API monitoring, Windows Registry, File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1055",
          "http://www.codeproject.com/Articles/4610/Three-Ways-to-Inject-Your-Code-into-Another-Proces",
          "http://en.wikipedia.org/wiki/DLL%20injection",
          "https://github.com/mattifestation/PowerSploit"
        ],
        "uuid": "43e7dc91-05b2-474c-b9ac-2ed4fe101f4d"
      },
      "value": "DLL Injection"
    },
    {
      "description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls –a</code> for Linux and macOS).\n\n===Windows===\n\nUsers can mark specific files as hidden by using the attrib.exe binary. Simply do <code>attrib +h filename</code> to mark a file or folder as hidden. Similarly, the “+s” marks a file as a system file and the “+r” flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively “/S”.\n\n===Linux/Mac===\n\nUsers can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name [[Citation: Sofacy Komplex Trojan]][[Citation: Antiquated Mac Malware]]. Files and folder that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: <code>defaults write com.apple.finder AppleShowAllFiles YES</code>, and then relaunch the Finder Application.\n\n===Mac===\n\nFiles on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app[[Citation: WireLurker]].\nMany applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys. \n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.\n\nDetection: Monitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1158",
          "https://www.paloaltonetworks.com/content/dam/pan/en%20US/assets/pdf/reports/Unit%2042/unit42-wirelurker.pdf",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"
        ],
        "uuid": "ee44bd9f-2ab5-4f3b-93cd-20f30cbc63b9"
      },
      "value": "Hidden Files and Directories"
    },
    {
      "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.[[Citation: MSDN Authentication Packages]]\n\nAdversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=<target binary></code>. The binary will then be executed by the system when the authentication packages are loaded.\n\nDetection: Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.[[Citation: Graeber 2014]][[Citation: Microsoft Configure LSA]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: DLL monitoring, Windows Registry, Loaded DLLs",
      "meta": {
        "mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1131",
          "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx",
          "https://technet.microsoft.com/en-us/library/dn408187.aspx",
          "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html"
        ],
        "uuid": "52d40641-c480-4ad5-81a3-c80ccaddf82d"
      },
      "value": "Authentication Package"
    },
    {
      "description": "An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.\n\nDetection: If malware uses Standard Cryptographic Protocol, SSL/TLS inspection can be used to detect command and control traffic within some encrypted communication channels.Custom Cryptographic Protocol, if malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.[[Citation: Fidelis DarkComet]]\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1079",
          "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf",
          "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
          "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html"
        ],
        "uuid": "428ca9f8-0e33-442a-be87-f869cb4cf73e"
      },
      "value": "Multilayer Encryption"
    },
    {
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10",
      "meta": {
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1109"
        ],
        "uuid": "10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44"
      },
      "value": "Component Firmware"
    },
    {
      "description": "Per Apple’s developer documentation, there are two supported methods for creating periodic background jobs: launchd and cron[[Citation: AppleDocs Scheduling Timed Jobs]].\n\n===Launchd===\n\nEach Launchd job is described by a different configuration property list (plist) file similar to Launch Daemons or Launch Agents, except there is an additional key called <code>StartCalendarInterval</code> with a dictionary of time values [[Citation: AppleDocs Scheduling Timed Jobs]]. This only works on macOS and OS X.\n\n===cron===\n\nSystem-wide cron jobs are installed by modifying <code>/etc/crontab</code> while per-user cron jobs are installed using crontab with specifically formatted crontab files [[Citation: AppleDocs Scheduling Timed Jobs]]. This works on Mac and Linux systems.\n\nBoth methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence[[Citation: Janicab]][[Citation: Methods of Mac Malware Persistence]][[Citation: Malware Persistence on OS X]], to conduct Execution as part of Lateral Movement, to gain root privileges, or to run a process under the context of a specific account.\n\nDetection: Legitimate scheduled jobs may be created during installation of new software or through administration functions. Tasks scheduled with launchd and cron can be monitored from their respective utilities to list out detailed information about the jobs. Monitor process execution resulting from launchd and cron tasks to look for unusual or unknown applications and behavior.\n\nPlatforms: Linux, MacOS\n\nData Sources: File monitoring, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1168",
          "https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf",
          "http://www.thesafemac.com/new-signed-malware-called-janicab/",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html"
        ],
        "uuid": "03405462-89b4-4b9a-bf60-76fbd75b82a4"
      },
      "value": "Cron Job"
    },
    {
      "description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts.[[Citation: Dell WMI Persistence]] Examples of events that may be subscribed to are the wall clock time or the computer's uptime.[[Citation: Kazanciyan 2014]] Several threat groups have reportedly used this technique to maintain persistence.[[Citation: Mandiant M-Trends 2015]]\n\nDetection: Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence.[[Citation: TechNet Autoruns]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: WMI Objects",
      "meta": {
        "mitre_data_sources": [
          "WMI Objects"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1084",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf",
          "https://www.secureworks.com/blog/wmi-persistence",
          "https://www.defcon.org/images/defcon-22/dc-22-presentations/Kazanciyan-Hastings/DEFCON-22-Ryan-Kazanciyan-Matt-Hastings-Investigating-Powershell-Attacks.pdf"
        ],
        "uuid": "e906ae4d-1d3a-4675-be23-22f7311c0da4"
      },
      "value": "Windows Management Instrumentation Event Subscription"
    },
    {
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.\n\nDetection: Monitor processes and command-line arguments to see if security tools are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Lack of log or event file reporting may be suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: API monitoring, File monitoring, Services, Windows Registry, Process command-line parameters, Anti-virus",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "File monitoring",
          "Services",
          "Windows Registry",
          "Process command-line parameters",
          "Anti-virus"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1089"
        ],
        "uuid": "2e0dd10b-676d-4964-acd0-8a404c92b044"
      },
      "value": "Disabling Security Tools"
    },
    {
      "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10",
      "meta": {
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1120"
        ],
        "uuid": "348f1eef-964b-4eb6-bb53-69b3dcb0c643"
      },
      "value": "Peripheral Device Discovery"
    },
    {
      "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.\n\nDetection: Compression software and compressed files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known compression utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used.\n\nIf the communications channel is unencrypted, compressed files can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers.[[Citation: Wikipedia File Header Signatures]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1002",
          "https://en.wikipedia.org/wiki/List%20of%20file%20signatures"
        ],
        "uuid": "b9f5dbe2-4c55-4fc5-af2e-d42c1d182ec4"
      },
      "value": "Data Compressed"
    },
    {
      "description": "Adversaries may attempt to get a listing of local system or domain accounts. \n\n===Windows===\n\nExample commands that can acquire this information are <code>net user</code>, <code>net group <groupname></code>, and <code>net localgroup <groupname></code> using the Net utility or through use of dsquery. If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, System Owner/User Discovery may apply.\n\n===Mac===\n\nOn Mac, groups can be enumerated through the <code>groups</code> and <code>id</code> commands. In mac specifically, <code>dscl . list /Groups</code> and <code>dscacheutil -q group</code> can also be used to enumerate groups and users.\n\n===Linux===\n\nOn Linux, local users can be enumerated through the use of the <code>/etc/passwd</code> file which is world readable. In mac, this same file is only used in single-user mode in addition to the <code>/etc/master.passwd</code> file.\n\nAlso, groups can be enumerated through the <code>groups</code> and <code>id</code> commands. In mac specifically, <code>dscl . list /Groups</code> and <code>dscacheutil -q group</code> can also be used to enumerate groups and users.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: API monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1087"
        ],
        "uuid": "72b74d71-8169-42aa-92e0-e7b04b9f5a08"
      },
      "value": "Account Discovery"
    },
    {
      "description": "Pass the hash (PtH)[[Citation: Aorato PTH]] is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a [[Credential Access]] technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. \n\nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.[[Citation: NSA Spotting]]\n\nDetection: Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1075",
          "http://www.nsa.gov/ia/%20files/app/spotting%20the%20adversary%20with%20windows%20event%20log%20monitoring.pdf",
          "http://www.aorato.com/labs/pass-the-hash/"
        ],
        "uuid": "c23b740b-a42b-47a1-aec2-9d48ddd547ff"
      },
      "value": "Pass the Hash"
    },
    {
      "description": "macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as <code>unset HISTFILE</code>, <code>export HISTFILESIZE=0</code>, <code>history -c</code>, <code>rm ~/.bash_history</code>.\n\nDetection: User authentication, especially via remote terminal services like SSH, without new entries in that user's <code>~/.bash_history</code> is suspicious. Additionally, the modification of the HISTFILE and HISTFILESIZE environment variables or the removal/clearing of the <code>~/.bash_history</code> file are indicators of suspicious activity.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: Authentication logs, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1146"
        ],
        "uuid": "b344346f-1321-4639-abd0-df3c95f1c0b0"
      },
      "value": "Clear Command History"
    },
    {
      "description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools.[[Citation: WindowsIR Anti-Forensic Techniques]]\n\nDetection: Forensic techniques exist to detect aspects of files that have had their timestamps modified.[[Citation: WindowsIR Anti-Forensic Techniques]] It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1099",
          "http://windowsir.blogspot.com/2013/07/howto-determinedetect-use-of-anti.html"
        ],
        "uuid": "128c55d3-aeba-469f-bd3e-c8996ab4112a"
      },
      "value": "Timestomp"
    },
    {
      "description": "When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>chmod</code> program can set these bits with via bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>.\n\nAn adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user’s context.\n\nDetection: Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters\n\nEffective Permissions: Administrator, root",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1166"
        ],
        "uuid": "8bf7a62e-e2a2-4f7b-94fb-eadcff06194f"
      },
      "value": "Setuid and Setgid"
    },
    {
      "description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.\n\nCredential Dumping to obtain password hashes may only get an adversary so far when Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table. Cracking hashes is usually done on adversary-controlled systems outside of the target network.Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\n\nAlso monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Authentication logs\n\nContributors: John Strand",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1110",
          "http://www.blackhillsinfosec.com/?p=4645",
          "http://www.cylance.com/assets/Cleaver/Cylance%20Operation%20Cleaver%20Report.pdf",
          "https://en.wikipedia.org/wiki/Password%20cracking"
        ],
        "uuid": "a93494bb-4b80-4ea1-8695-3236a49916fd"
      },
      "value": "Brute Force"
    },
    {
      "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Reg may be used for local or remote Registry modification.Valid Accounts are required, along with access to the remote system's Windows Admin Shares for RPC communication.\n\nDetection: Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.\n\nMonitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1112",
          "https://technet.microsoft.com/en-us/library/cc754820.aspx",
          "https://technet.microsoft.com/en-us/library/cc732643.aspx"
        ],
        "uuid": "57340c81-c025-4189-8fa0-fc7ede51bae4"
      },
      "value": "Modify Registry"
    },
    {
      "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.\n\n===Mac===\n\nOn OSX, the native command <code>screencapture</code> is used to capture screenshots.\n\n===Linux===\n\nOn Linux, there is the native command <code>xwd</code>.[[Citation: Antiquated Mac Malware]]\n\nDetection: Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: API monitoring, Process monitoring, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1113",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"
        ],
        "uuid": "0259baeb-9f63-4c69-bf10-eb038c390688"
      },
      "value": "Screen Capture"
    },
    {
      "description": "macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the <code>osalang</code> program.\nAppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. \n\nAdversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python [[Citation: Macro Malware Targets Macs]]. Scripts can be run from the command lie via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>.\n\nDetection: Monitor for execution of AppleScript through osascript that may be related to other suspicious behavior occurring on the system.\n\nPlatforms: MacOS, OS X\n\nData Sources: API monitoring, System calls, Process Monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "System calls",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1155",
          "https://securingtomorrow.mcafee.com/mcafee-labs/macro-malware-targets-macs/"
        ],
        "uuid": "5c4c4c35-d77a-4f2d-88b6-7da63e1f0f06"
      },
      "value": "AppleScript"
    },
    {
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made [[Citation: Sofacy Komplex Trojan]]. Running a command from launchctl is as simple as <code>launchctl submit -l <labelName> -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\"</code>. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. \n\nAdversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.\n\nDetection: Knock Knock can be used to detect persistent programs such as those installed via launchctl as launch agents or launch daemons. Additionally, every launch agent or launch daemon must have a corresponding plist file on disk somewhere which can be monitored. Monitor process execution from launchctl/launchd for unusual or unknown processes.\n\nPlatforms: MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1152",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/"
        ],
        "uuid": "bff9f35b-6231-450f-b657-4745870a9462"
      },
      "value": "Launchctl"
    },
    {
      "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware.\n\nDetection: The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Process use of network, Process monitoring, Process command-line parameters, Anti-virus, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Process command-line parameters",
          "Anti-virus",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1066"
        ],
        "uuid": "00d0b012-8a03-410e-95de-5826bf542de6"
      },
      "value": "Indicator Removal from Tools"
    },
    {
      "description": "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.\n\nA common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself[[Citation: Writing Bad Malware for OSX]][[Citation: Malware Persistence on OS X]].\nIf the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.\n\nDetection: Objective-See's Dylib Hijacking Scanner can be used to detect potential cases of dylib hijacking. Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process.\n\nPlatforms: MacOS, OS X\n\nData Sources: File monitoring\n\nEffective Permissions: Administrator, root",
      "meta": {
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1157",
          "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
          "https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf"
        ],
        "uuid": "0375badc-b2da-4438-b0c5-1e6c6b3285a3"
      },
      "value": "Dylib Hijacking"
    },
    {
      "description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access.[[Citation: Microsoft Change Default Programs]][[Citation: Microsoft File Handlers]] Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nDetection: Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process. \n\nUser file association preferences are stored under <code> [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts</code> and override associations configured under <code>[HKEY_CLASSES_ROOT]</code>. Changes to a user's preference will occur under this entry's subkeys.\n\nAlso look for abnormal process call trees for execution of other commands that could relate to [[Discovery]] actions or other techniques.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1042",
          "http://msdn.microsoft.com/en-us/library/bb166549.aspx",
          "https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs"
        ],
        "uuid": "68c96494-1a50-403e-8844-69a6af278c68"
      },
      "value": "Change Default File Association"
    },
    {
      "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to \"evil.txt \" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed[[Citation: Mac Backdoors are back]]. \n\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.\n\nDetection: It's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1151",
          "https://arstechnica.com/security/2016/07/after-hiatus-in-the-wild-mac-backdoors-are-suddenly-back/"
        ],
        "uuid": "2258e6a4-3281-4244-947b-4323a01a30a7"
      },
      "value": "Space after Filename"
    },
    {
      "description": "Adversaries may target user email to collect sensitive information from a target.\n\nFiles containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.\n\nAdversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network.\n\nSome adversaries may acquire user credentials and access externally facing webmail applications, such as Outlook Web Access.\n\nDetection: There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.\n\nFile access of local system email files for Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs, File monitoring, Process monitoring, Process use of network",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "File monitoring",
          "Process monitoring",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1114"
        ],
        "uuid": "1608f3e1-598a-42f4-a01a-2e252e81728f"
      },
      "value": "Email Collection"
    },
    {
      "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.\n\n===Windows===\n\nExample commands and utilities that obtain this information include <code>ver</code>, Systeminfo, and <code>dir</code> within cmd for identifying information based on present files and directories.\n\n===Mac===\n\nOn Mac, the <code>systemsetup</code> command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the <code>system_profiler</code> gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1082"
        ],
        "uuid": "354a7f88-63fb-41b5-a801-ce3b377b36f1"
      },
      "value": "System Information Discovery"
    },
    {
      "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\n===Windows===\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net.\n\n===Mac and Linux ===\n\nIn Mac and Linux, <code>netstat</code> and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\".\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1049"
        ],
        "uuid": "7e150503-88e7-4861-866b-ff1ac82c4475"
      },
      "value": "System Network Connections Discovery"
    },
    {
      "description": "Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.\n\nIf a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.[[Citation: Mandiant M Trends 2011]]\n\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors.[[Citation: Operation Emmental]]\n\nOther hardware tokens, such as RSA SecurID, require the adversary to have access to the physical device or the seed and algorithm in addition to the corresponding credentials.\n\nDetection: Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nContributors: John Lambert, Microsoft Threat Intelligence Center",
      "meta": {
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1111",
          "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf",
          "https://dl.mandiant.com/EE/assets/PDF%20MTrends%202011.pdf"
        ],
        "uuid": "dd43c543-bb85-4a6f-aa6e-160d90d06a49"
      },
      "value": "Two-Factor Authentication Interception"
    },
    {
      "description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters.[[Citation: Microsoft CreateProcess]]\n\nAdditional Windows API calls that can be used to execute binaries include:[[Citation: Kanthak Verifier]]\n\n*CreateProcessA() and CreateProcessW(),\n*CreateProcessAsUserA() and CreateProcessAsUserW(),\n*CreateProcessInternalA() and CreateProcessInternalW(),\n*CreateProcessWithLogonW(), CreateProcessWithTokenW(),\n*LoadLibraryA() and LoadLibraryW(),\n*LoadLibraryExA() and LoadLibraryExW(),\n*LoadModule(),\n*LoadPackagedLibrary(),\n*WinExec(),\n*ShellExecuteA() and ShellExecuteW(),\n*ShellExecuteExA() and ShellExecuteExW()\n\nDetection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows API functions such as CreateProcess are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: API monitoring, Process monitoring\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1106",
          "http://msdn.microsoft.com/en-us/library/ms682425",
          "https://skanthak.homepage.t-online.de/verifier.html"
        ],
        "uuid": "391d824f-0ef1-47a0-b0ee-c59a75e27670"
      },
      "value": "Execution through API"
    },
    {
      "description": "The Microsoft Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system.[[Citation: Microsoft Component Object Model]] Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.[[Citation: GDATA COM Hijacking]] An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.\n\nDetection: There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations replacing know binary paths with unknown paths. Even though some third party applications define user COM objects, the presence of objects within <code>HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\</code> may be anomalous and should be investigated since user objects will be loaded prior to machine objects in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\</code>.[[Citation: Endgame COM Hijacking]] Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated. Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, DLL monitoring, Loaded DLLs\n\nContributors: ENDGAME",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "DLL monitoring",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1122",
          "https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence",
          "https://msdn.microsoft.com/library/ms694363.aspx",
          "https://www.endgame.com/blog/how-hunt-detecting-persistence-evasion-com"
        ],
        "uuid": "9b52fca7-1a36-4da0-b62d-da5bd83b4d69"
      },
      "value": "Component Object Model Hijacking"
    },
    {
      "description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. \n\n===Windows===\n\nApplications can access clipboard data by using the Windows API.[[Citation: MSDN Clipboard]] \n\n===Mac===\n\nOSX provides a native command, <code>pbpaste</code>, to grab clipboard contents [[Citation: Operating with EmPyre]].\n\nDetection: Access to the clipboard is a legitimate function of many applications on a Windows system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: API monitoring",
      "meta": {
        "mitre_data_sources": [
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1115",
          "http://www.rvrsh3ll.net/blog/empyre/operating-with-empyre/",
          "https://msdn.microsoft.com/en-us/library/ms649012"
        ],
        "uuid": "30973a08-aed9-4edf-8604-9084ce1b5c4f"
      },
      "value": "Clipboard Data"
    },
    {
      "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.[[Citation: MSDN InstallUtil]] InstallUtil is located in the .NET directory on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code>.InstallUtil.exe is digitally signed by Microsoft.\n\nAdversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>.[[Citation: SubTee GitHub All The Things Application Whitelisting Bypass]]\n\nDetection: Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, Process command-line parameters\n\nContributors: Casey Smith",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1118",
          "https://msdn.microsoft.com/en-us/library/50614e95.aspx",
          "https://github.com/subTee/AllTheThings"
        ],
        "uuid": "f792d02f-813d-402b-86a5-ab98cb391d3b"
      },
      "value": "InstallUtil"
    },
    {
      "description": "Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Process use of network, Process monitoring, Network protocol analysis",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Process monitoring",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1001",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "ad255bfe-a9e6-4b52-a258-8d3462abe842"
      },
      "value": "Data Obfuscation"
    },
    {
      "description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.\n\nDetection: Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1023"
        ],
        "uuid": "970cdb5c-02fb-4c38-b17e-d6327cf3c810"
      },
      "value": "Shortcut Modification"
    },
    {
      "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system.\n\nDetection: Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system).\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Network protocol analysis, Process use of network, File monitoring, Malware reverse engineering, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "Network protocol analysis",
          "Process use of network",
          "File monitoring",
          "Malware reverse engineering",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1027"
        ],
        "uuid": "b3d682b6-98f2-4fb0-aa3b-b4df007ca70a"
      },
      "value": "Obfuscated Files or Information"
    },
    {
      "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nDetection: Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, File monitoring, API monitoring",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1125"
        ],
        "uuid": "6faf650d-bf31-4eb4-802d-1000cf38efaf"
      },
      "value": "Video Capture"
    },
    {
      "description": "In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called <code>com.apple.quarantine</code>. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. \n\nApps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won’t set this flag. Additionally, other utilities or events like drive-by downloads don’t necessarily set it either. This completely bypasses the built-in Gatekeeper check[[Citation: Methods of Mac Malware Persistence]]. The presence of the quarantine flag can be checked by the xattr command <code>xattr /path/to/MyApp.app</code> for <code>com.apple.quarantine</code>. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, <code>sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app</code> [[Citation: Clearing quarantine attribute]][[Citation: OceanLotus for OS X]].\n \nIn typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS’s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the url where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application [[Citation: Bypassing Gatekeeper]].\n\nDetection: Monitoring for the removal of the <code>com.apple.quarantine</code> flag by a user instead of the operating system is a suspicious action and should be examined further.\n\nPlatforms: MacOS, OS X",
      "meta": {
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1144",
          "https://derflounder.wordpress.com/2012/11/20/clearing-the-quarantine-extended-attribute-from-downloaded-applications/",
          "https://blog.malwarebytes.com/cybercrime/2015/10/bypassing-apples-gatekeeper/",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update"
        ],
        "uuid": "05886665-fc7e-4a3d-847f-500e0112aac7"
      },
      "value": "Gatekeeper Bypass"
    },
    {
      "description": "Masquerading occurs when an executable, legitimate or malicious, is placed in a commonly trusted location (such as C:\\Windows\\System32) or named with a common name (such as \"explorer.exe\" or \"svchost.exe\") to bypass tools that trust executables by relying on file name or path. An adversary may even use a renamed copy of a legitimate utility, such as rundll32.exe.[[Citation: Endgame Masquerade Ball]] Masquerading also may be done to deceive defenders and system administrators into thinking a file is benign by associating the name with something that is thought to be legitimate.\n\nDetection: Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the binary name on disk and the binary's resource section, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries could provide useful leads, but may not always be indicative of malicious activity.[[Citation: Endgame Masquerade Ball]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Binary file metadata\n\nContributors: ENDGAME",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1036",
          "https://www.endgame.com/blog/how-hunt-masquerade-ball"
        ],
        "uuid": "42e8de7b-37b2-4258-905a-6897815e58e0"
      },
      "value": "Masquerading"
    },
    {
      "description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests[[Citation: MSDN Manifests]] are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.[[Citation: Stewart 2014]]\n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.\n\nDetection: Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process use of network, Process monitoring, Loaded DLLs",
      "meta": {
        "mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1073",
          "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf",
          "https://msdn.microsoft.com/en-us/library/aa375365"
        ],
        "uuid": "b2001907-166b-4d71-bb3c-9d26c871de09"
      },
      "value": "DLL Side-Loading"
    },
    {
      "description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or Scripting after being gathered during Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n\nDetection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process use of network",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1020"
        ],
        "uuid": "774a3188-6ba9-4dc4-879d-d54ee48a5ce9"
      },
      "value": "Automated Exfiltration"
    },
    {
      "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as [[Lateral Movement]], based on the information obtained.\n\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process use of network, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Packet capture",
          "Process use of network",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1046"
        ],
        "uuid": "e3a12395-188d-4051-9a16-ea8e14d07b88"
      },
      "value": "Network Service Scanning"
    },
    {
      "description": "<code>~/.bash_profile</code> and <code>~/.bashrc</code> are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. <code>~/.bash_profile</code> is executed for login shells and <code>~/.bashrc</code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), <code>~/.bash_profile</code> is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, <code>~/.bashrc</code> is executed. This allows users more fine grained control over when they want certain commands executed.\n\nMac's Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~/.bash_profile</code> each time instead of <code>~/.bashrc</code>.\n\nThese files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.\n\nDetection: While users may customize their <code>~/.bashrc</code> and <code>~/.bash_profile</code> files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters, Process use of network",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1156"
        ],
        "uuid": "1aeb52d6-ae80-42bf-ade8-c2635190837d"
      },
      "value": ".bash_profile and .bashrc"
    },
    {
      "description": "Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.[[Citation: External to DA, the OS X Way]]\n\nDetection: Monitoring when the user's <code>.bash_history</code> is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like <code>cat ~/.bash_history</code>.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1139",
          "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way"
        ],
        "uuid": "2f54ae97-ac8b-4401-85ed-215cfa0a380f"
      },
      "value": "Bash History"
    },
    {
      "description": "Adversaries may move to additional systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into another system and executes. This may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system.\n\nDetection: Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for [[Command and Control]] and system and network information [[Discovery]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Data loss prevention",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Data loss prevention"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1091"
        ],
        "uuid": "3b744087-9945-4a6f-91e8-9dbceda417a4"
      },
      "value": "Replication Through Removable Media"
    },
    {
      "description": "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).Remote Services similar to RDS.\n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Accessibility Features technique for [[Persistence]].[[Citation: Alperovitch Malware]]\n\nDetection: Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs, Netflow/Enclave netflow, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1076",
          "https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx",
          "http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/"
        ],
        "uuid": "51dea151-0898-4a45-967c-3ebee0420484"
      },
      "value": "Remote Desktop Protocol"
    },
    {
      "description": "Data exfiltration may be performed only at certain times of day or at certain intervals.  This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n\nDetection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1029"
        ],
        "uuid": "4eeaf8a9-c86b-4954-a663-9555fb406466"
      },
      "value": "Scheduled Transfer"
    },
    {
      "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.DLL Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.\n\nSome UAC bypass methods rely on modifying specific, user-accessible Registry settings.  For example:\n\n* The <code>eventvwr.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command</code> Registry key.[[Citation: enigma0x3 Fileless UAC Bypass]]\n* The <code>sdclt.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe</code> and <code>[HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand</code> Registry keys.[[Citation: enigma0x3 sdclt app paths]][[Citation: enigma0x3 sdclt bypass]]\n\nAnalysts should monitor these Registry settings for unauthorized changes.\n\nPlatforms: Windows Server 2012, Windows 7, Windows 8, Windows Server 2008 R2, Windows Server 2012 R2, Windows 8.1, Windows 10\n\nData Sources: System calls, Process monitoring, Authentication logs, Process command-line parameters\n\nEffective Permissions: Administrator\n\nContributors: Stefan Kanthak, Casey Smith",
      "meta": {
        "mitre_data_sources": [
          "System calls",
          "Process monitoring",
          "Authentication logs",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2012",
          "Windows 7",
          "Windows 8",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1088",
          "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
          "https://github.com/hfiref0x/UACME",
          "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
          "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/",
          "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
          "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/",
          "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
          "http://www.pretentiousname.com/misc/win7%20uac%20whitelist2.html",
          "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
          "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware"
        ],
        "uuid": "ca1a3f50-5ebd-41f8-8320-2c7d6a6e88be"
      },
      "value": "Bypass User Account Control"
    },
    {
      "description": "===Windows===\n\nWindows allows logon scripts to be run whenever a specific user or group of users log into a system.[[Citation: TechNet Logon Scripts]] The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.\n\nIf adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\n\n===Mac===\n\nMac allows login and logoff hooks to be run as root whenever a specific user logs into or out of a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike startup items, a login hook executes as root[[Citation: creating login hook]]. There can only be one login hook at a time though. If adversaries can access these scripts, they can insert additional code to the script to execute their tools when a user logs in.\n\nDetection: Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1037",
          "https://support.apple.com/de-at/HT2420",
          "https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx"
        ],
        "uuid": "03259939-0b57-482f-8eb5-87c0e0d54334"
      },
      "value": "Logon Scripts"
    },
    {
      "description": "A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.[[Citation: Trend Micro APT Attack Tools]]\n\nThe definition of a proxy can also be expanded out to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.\n\nThe network may be within a single organization or across organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.\n\nDetection: Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Network activities disassociated from user-driven actions from processes that normally require user direction are suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Process use of network, Process monitoring, Netflow/Enclave netflow, Packet capture\n\nContributors: Walker Johnson",
      "meta": {
        "mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Netflow/Enclave netflow",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1090",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "731f4f55-b6d0-41d1-a7a9-072a66389aea"
      },
      "value": "Connection Proxy"
    },
    {
      "description": "The sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>[[Citation: OSX.Dok Malware]]. \n\nAdversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.\n\nDetection: On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring\n\nEffective Permissions: root",
      "meta": {
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1169",
          "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/"
        ],
        "uuid": "809ff990-982f-4997-8570-a6f516e8fede"
      },
      "value": "Sudo"
    },
    {
      "description": "Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.\n\n===Office Template Macros===\n\nMicrosoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.[[Citation: Microsoft Change Normal Template]]\n\nOffice Visual Basic for Applications (VBA) macros[[Citation: MSDN VBA in Office]] can inserted into the base templated and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.[[Citation: enigma0x3 normal.dotm]][[Citation: Hexacorn Office Template Macros]]\n\nWord Normal.dotm location:<code>C:\\Users\\(username)\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb location:<code>C:\\Users\\(username)\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.\n\n===Office Test===\n\nA Registry location was found that when a DLL reference was placed within it the corresponding DLL pointed to by the binary path would be executed every time an Office application is started[[Citation: Hexacorn Office Test]]\n\n<code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\n===Add-ins===\n\nOffice add-ins can be used to add functionality to Office programs.[[Citation: Microsoft Office Add-ins]]\n\nAdd-ins can also be used to obtain persistence because they can be set to execute code when an Office application starts. There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), and Visual Studio Tools for Office (VSTO) add-ins.[[Citation: MRWLabs Office Persistence Add-ins]]\n\nDetection: Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Modification to base templated, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated.\n\nMonitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.[[Citation: MRWLabs Office Persistence Add-ins]]\n\nNon-standard process execution trees may also indicate suspicious or malicious behavior. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.\n\nPlatforms: Windows 10, Windows Server 2012, Windows 7, Windows 8, Windows Server 2008 R2, Windows Server 2012 R2, Windows 8.1, Windows XP, Windows Vista\n\nData Sources: Process monitoring, Process command-line parameters, Windows Registry, File monitoring\n\nContributors: Loic Jaquemet, Ricardo Dias",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Windows Registry",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows 10",
          "Windows Server 2012",
          "Windows 7",
          "Windows 8",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows 8.1",
          "Windows XP",
          "Windows Vista"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1137",
          "https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office",
          "http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/",
          "https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/",
          "https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460",
          "https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/",
          "http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/",
          "https://support.office.com/article/Change-the-Normal-template-Normal-dotm-06de294b-d216-47f6-ab77-ccb5166f98ea"
        ],
        "uuid": "8f1a2752-6bf6-46de-8ad1-7455214da405"
      },
      "value": "Office Application Startup"
    },
    {
      "description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries.[[Citation: Microsoft Regsvr32]]\n\nAdversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.\n\nRegsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.[[Citation: SubTee Regsvr32 Whitelisting Bypass]] This variation of the technique has been used in campaigns targeting governments.[[Citation: FireEye Regsvr32 Targeting Mongolian Gov]]\n\nDetection: Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Loaded DLLs, Process monitoring, Windows Registry, Process command-line parameters\n\nContributors: Casey Smith",
      "meta": {
        "mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1117",
          "https://support.microsoft.com/en-us/kb/249873",
          "https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
          "https://www.fireeye.com/blog/threat-research/2017/02/spear%20phishing%20techn.html"
        ],
        "uuid": "68f7e3a1-f09f-4164-9a62-16b648a0dd5a"
      },
      "value": "Regsvr32"
    },
    {
      "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. \n\n===Windows===\n\nExample utilities used to obtain this information are <code>dir</code> and <code>tree</code>.Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1083",
          "http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html"
        ],
        "uuid": "7bc57495-ea59-4380-be31-a64af124ef18"
      },
      "value": "File and Directory Discovery"
    },
    {
      "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1043",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "f879d51c-5476-431c-aedf-f14d207e4d1e"
      },
      "value": "Commonly Used Port"
    },
    {
      "description": "Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems.[[Citation: Wikipedia Binary-to-text Encoding]][[Citation: Wikipedia Character Encoding]] Some data encoding systems may also result in data compression, such as gzip.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Process use of network, Process Monitoring, Network protocol analysis\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Process Monitoring",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1132",
          "https://en.wikipedia.org/wiki/Character%20encoding",
          "https://en.wikipedia.org/wiki/Binary-to-text%20encoding",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "cc7b8c4e-9be0-47ca-b0bb-83915ec3ee2f"
      },
      "value": "Data Encoding"
    },
    {
      "description": "Adversaries may search local file systems and remote file shares for files containing passwords.  These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through Credential Dumping.Valid Accounts for more information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1081",
          "http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html",
          "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx"
        ],
        "uuid": "ba8e391f-14b5-496f-81f2-2d5ecd646c1c"
      },
      "value": "Credentials in Files"
    },
    {
      "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.[[Citation: TechNet PowerShell]] Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,[[Citation: Github PowerShell Empire]] PowerSploit,[[Citation: Powersploit]] and PSAttack.[[Citation: Github PSAttack]]\n\nDetection: If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\n\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution.[[Citation: Malware Archaeology PowerShell Cheat Sheet]] PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.[[Citation: FireEye PowerShell Logging 2016]] An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1086",
          "https://github.com/PowerShellEmpire/Empire",
          "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
          "https://github.com/mattifestation/PowerSploit",
          "https://github.com/jaredhaight/PSAttack",
          "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx",
          "https://www.fireeye.com/blog/threat-research/2016/02/greater%20visibilityt.html"
        ],
        "uuid": "f4882e23-8aa7-4b12-b28a-b349c12ee9e0"
      },
      "value": "PowerShell"
    },
    {
      "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules, anti-virus, and virtualization. These checks may be built into early-stage remote access tools.\n\n===Windows===\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\n\n===Mac===\n\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1063"
        ],
        "uuid": "241814ae-de3f-4656-b49e-f9a80764d4b7"
      },
      "value": "Security Software Discovery"
    },
    {
      "description": "The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.\n\nDetection: Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1154"
        ],
        "uuid": "4e0157fe-5e38-4f35-a6b1-f0c43d2e9f62"
      },
      "value": "Trap"
    },
    {
      "description": "Windows service configuration information, including the file path to the service's executable, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.\n\nAdversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of Masquerading that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.\n\nDetection: Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.cmd commands or scripts.\n\nLook for abnormal process call trees from known services and for execution of other commands that could relate to Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1031",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "62dfd1ca-52d5-483c-a84b-d6e80bf94b7b"
      },
      "value": "Modify Existing Service"
    },
    {
      "description": "Adversaries use command and control over an encrypted channel using a known encryption protocol like HTTPS or SSL/TLS. The use of strong encryption makes it difficult for defenders to detect signatures within adversary command and control traffic.\n\nSome adversaries may use other encryption protocols and algorithms with symmetric keys, such as RC4, that rely on encryption keys encoded into malware configuration files and not public key cryptography. Such keys may be obtained through malware reverse engineering.\n\nDetection: SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.[[Citation: SANS Decrypting SSL]] SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.[[Citation: SEI SSL Inspection Risks]]\n\nIf malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.[[Citation: Fidelis DarkComet]]\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring, SSL/TLS inspection",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Malware reverse engineering",
          "Process use of network",
          "Process monitoring",
          "SSL/TLS inspection"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1032",
          "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf",
          "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
          "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html"
        ],
        "uuid": "4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5"
      },
      "value": "Standard Cryptographic Protocol"
    },
    {
      "description": "Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.Remote Services like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on *nix-based systems or <code>C:\\Users\\(username)\\.ssh\\</code> on Windows.\n\nPrivate keys should require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.[[Citation: Kaspersky Careto]][[Citation: Palo Alto Prince of Persia]]\n\nDetection: Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: File monitoring\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1145",
          "https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/",
          "https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask%20v1.0.pdf",
          "https://en.wikipedia.org/wiki/Public-key%20cryptography"
        ],
        "uuid": "f6f87898-f389-4962-8c0a-2db10aa667e8"
      },
      "value": "Private Keys"
    },
    {
      "description": "Adversaries may steal the credentials of a specific user or service account using [[Credential Access]] techniques. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network and may even be used for persistent access to remote systems. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nAdversaries may also create accounts, sometimes using pre-defined account names and passwords, as a means for persistence through backup access in case other means are unsuccessful. \n\nThe overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[[Citation: TechNet Credential Theft]]\n\nDetection: Configure robust, consistent account activity audit policies across the enterprise.[[Citation: TechNet Audit Policy]] Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\nPerform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Authentication logs, Process monitoring\n\nEffective Permissions: User, Administrator",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1078",
          "https://technet.microsoft.com/en-us/library/dn487457.aspx",
          "https://technet.microsoft.com/en-us/library/dn535501.aspx"
        ],
        "uuid": "b17a1a56-e99c-403c-8948-561df0cffe81"
      },
      "value": "Valid Accounts"
    },
    {
      "description": "As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD [[Citation: Prolific OSX Malware History]]. The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn’t know anything was different [[Citation: Methods of Mac Malware Persistence]]. By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.\n\nDetection: Determining the original entry point for a binary is difficult, but checksum and signature verification is very possible. Modifying the LC_MAIN entry point or adding in an additional LC_MAIN entry point invalidates the signature for the file and can be detected. Collect running process information and compare against known applications to look for suspicious behavior.\n\nPlatforms: MacOS, OS X\n\nData Sources: Binary file metadata, Malware reverse engineering, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "Binary file metadata",
          "Malware reverse engineering",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1149",
          "https://assets.documentcloud.org/documents/2459197/bit9-carbon-black-threat-research-report-2015.pdf",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ],
        "uuid": "f52bb8c4-8e68-4834-939f-d193f9cfce61"
      },
      "value": "LC_MAIN Hijacking"
    },
    {
      "description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1007"
        ],
        "uuid": "322bad5a-1c49-4d23-ab79-76d641794afa"
      },
      "value": "System Service Discovery"
    },
    {
      "description": "===Windows===\n\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using Credential Dumping. The information may be collected in a number of different ways using other Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1033"
        ],
        "uuid": "03d7999c-1f4c-42cc-8373-e7690d318104"
      },
      "value": "System Owner/User Discovery"
    },
    {
      "description": "Some adversaries may split communications between different protocols.  There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions.  The split could also be random to simply avoid data threshold alerts on any one communication.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]] Correlating alerts between multiple communication channels can further help identify command-and-control behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1026",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "99709758-2b96-48f2-a68a-ad7fbd828091"
      },
      "value": "Multiband Communication"
    },
    {
      "description": "Pass the ticket (PtT)Valid Accounts are captured by Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.[[Citation: ADSecurity AD Kerberos Attacks]][[Citation: GentilKiwi Pass the Ticket]]\n\nSilver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).[[Citation: ADSecurity AD Kerberos Attacks]]\n\nGolden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.[[Citation: Campbell 2014]]\n\nDetection: Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.\n\nEvent ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.[[Citation: CERT-EU Golden Ticket Protection]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs\n\nContributors: Ryan Becwar",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1097",
          "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
          "http://www.aorato.com/labs/pass-the-ticket/",
          "https://adsecurity.org/?p=556",
          "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos"
        ],
        "uuid": "a257ed11-ff3b-4216-8c9d-3938ef57064c"
      },
      "value": "Pass the Ticket"
    },
    {
      "description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).[[Citation: Microsoft WinRM]] It may be called with the <code>winrm</code> command or by any number of programs such as PowerShell.[[Citation: Jacobsen 2014]]\n\nDetection: Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Authentication logs, Netflow/Enclave netflow, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1028",
          "http://msdn.microsoft.com/en-us/library/aa384426",
          "http://www.slideee.com/slide/lateral-movement-with-powershell"
        ],
        "uuid": "c3bce4f4-9795-46c6-976e-8676300bbc39"
      },
      "value": "Windows Remote Management"
    },
    {
      "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.\n\nDetection: Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10\n\nData Sources: API monitoring, Process monitoring, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1123"
        ],
        "uuid": "1035cdf2-3e5f-446f-a7a7-e8f6d7925967"
      },
      "value": "Audio Capture"
    },
    {
      "description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors.[[Citation: F-Secure Cosmicduke]]\n\nDetection: If malware uses custom encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.[[Citation: Fidelis DarkComet]]\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1024",
          "https://www.f-secure.com/documents/996508/1030745/cosmicduke%20whitepaper.pdf",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
          "https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf"
        ],
        "uuid": "3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d"
      },
      "value": "Custom Cryptographic Protocol"
    },
    {
      "description": "Cause a binary or script to execute based on interacting with the file through a graphical user interface (GUI) or in an interactive remote session such as Remote Desktop Protocol.\n\nDetection: Detection of execution through the GUI will likely lead to significant false positives. Other factors should be considered to detect misuse of services that can lead to adversaries gaining access to systems through interactive remote sessions. \n\nUnknown or unusual process launches outside of normal behavior on a particular system occurring through remote interactive sessions are suspicious. Collect and audit security logs that may indicate access to and use of [[Legitimate Credentials]] to access remote systems within the network.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1061"
        ],
        "uuid": "a6525aec-acc4-47fe-92f9-b9b4de4b9228"
      },
      "value": "Graphical User Interface"
    },
    {
      "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Malware reverse engineering",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1008",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "f24faf46-3b26-4dbb-98f2-63460498e433"
      },
      "value": "Fallback Channels"
    },
    {
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions.[[Citation: Technet MS14-068]][[Citation: ADSecurity Detecting Forged Tickets]]\n\nDetection: Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Windows Error Reporting, File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: John Lambert, Microsoft Threat Intelligence Center",
      "meta": {
        "mitre_data_sources": [
          "Windows Error Reporting",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1068",
          "https://technet.microsoft.com/en-us/library/security/ms14-068.aspx",
          "https://adsecurity.org/?p=1515"
        ],
        "uuid": "b21c3b2d-02e6-45b1-980b-e69051040839"
      },
      "value": "Exploitation of Vulnerability"
    },
    {
      "description": "Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in <code>/Library/Preferences/com.apple.loginwindow</code> called <code>Hide500Users</code> that prevents users with userIDs 500 and lower from appearing at the login screen. By using the Create Account technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: <code>sudo dscl . -create /Users/username UniqueID 401</code>[[Citation: Cybereason OSX Pirrit]].\n\nDetection: This technique prevents the new user from showing up at the log in screen, but all of the other signs of a new user still exist. The user still gets a home directory and will appear in the authentication logs.\n\nPlatforms: MacOS, OS X\n\nData Sources: Authentication logs, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "File monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1147",
          "https://www2.cybereason.com/research-osx-pirrit-mac-os-x-secuirty"
        ],
        "uuid": "8c31ad7f-a31e-400e-b66a-08bc53660967"
      },
      "value": "Hidden Users"
    },
    {
      "description": "Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.\n\nDetection: Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool. \n\nWhen executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information [[Discovery]] or [[Lateral Movement]], which could be used as event indicators that point to the source file.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X",
      "meta": {
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1009"
        ],
        "uuid": "519630c5-f03f-4882-825c-3af924935817"
      },
      "value": "Binary Padding"
    },
    {
      "description": "MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them[[Citation: Adding Login Items]]. Users have direct control over login items installed using a shared file list which are also visible in System Preferences[[Citation: Adding Login Items]]. These login items are stored in the user's <code>~/Library/Preferences/</code> directory in a plist file called <code>com.apple.loginitems.plist</code>[[Citation: Methods of Mac Malware Persistence]]. Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to ‘Hide’ the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in[[Citation: Malware Persistence on OS X]][[Citation: OSX.Dok Malware]].\n\nDetection: All the login items are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area should be monitored and whitelisted for known good applications. Monitor process execution resulting from login actions for unusual or unknown applications.\n\nPlatforms: MacOS, OS X",
      "meta": {
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1162",
          "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html",
          "https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ],
        "uuid": "6a63ed12-fe3c-42e3-9c5e-2fcd740dc5ab"
      },
      "value": "Login Item"
    },
    {
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Valid Accounts to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.Web Shell is one such way to maintain access to a network through an externally accessible Web server.\n\nDetection: Existing methods of detecting remote access tools are helpful. Backup remote access tools or other access points may not have established command and control channels open during an intrusion, so the volume of data transferred may not be as high as the primary channel unless access is lost.\n\nDetection of tools based on beacon traffic, Valid Accounts and External Remote Services to collect account use information.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Process monitoring, Process use of network, Packet capture, Network protocol analysis, File monitoring, Authentication logs, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process use of network",
          "Packet capture",
          "Network protocol analysis",
          "File monitoring",
          "Authentication logs",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1108",
          "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf"
        ],
        "uuid": "6aabc5ec-eae6-422c-8311-38d45ee9838a"
      },
      "value": "Redundant Access"
    },
    {
      "description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\n\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol\n\nDetection: Encryption software and encrypted files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known encryption utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used. Often the encryption key is stated within command-line invocation of the software. \n\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. \n\nNetwork traffic may also be analyzed for entropy to determine if encrypted data is being transmitted.[[Citation: Zhang 2013]] If the communications channel is unencrypted, encrypted files of known file types can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers.[[Citation: Wikipedia File Header Signatures]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1022",
          "http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf",
          "https://en.wikipedia.org/wiki/List%20of%20file%20signatures"
        ],
        "uuid": "d54416bd-0803-41ca-870a-ce1af7c05638"
      },
      "value": "Data Encrypted"
    },
    {
      "description": "Windows systems use a common method to look for required DLLs to load into a program.[[Citation: Microsoft DLL Search]] Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks,[[Citation: OWASP Binary Planting]] by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.[[Citation: Microsoft 2269637]] Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation.[[Citation: Microsoft DLL Redirection]][[Citation: Microsoft Manifests]][[Citation: Mandiant Search Order]]\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.\n\nDetection: Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Disallow loading of remote DLLs.[[Citation: Microsoft DLL Preloading]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, DLL monitoring, Process monitoring, Process command-line parameters\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "DLL monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1038",
          "https://msdn.microsoft.com/en-US/library/aa375365",
          "https://www.owasp.org/index.php/Binary%20planting",
          "http://msdn.microsoft.com/en-US/library/ms682586",
          "http://blogs.technet.com/b/srd/archive/2010/08/23/more-information-about-dll-preloading-remote-attack-vector.aspx",
          "http://msdn.microsoft.com/en-US/library/ms682600",
          "http://blogs.technet.com/b/msrc/archive/2010/08/21/microsoft-security-advisory-2269637-released.aspx",
          "https://www.mandiant.com/blog/dll-search-order-hijacking-revisited/"
        ],
        "uuid": "46944654-fcc1-4f63-9dad-628102376586"
      },
      "value": "DLL Search Order Hijacking"
    },
    {
      "description": "Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to cmd may be used to gather information.\n\nDetection: Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1039"
        ],
        "uuid": "ae676644-d2d2-41b7-af7e-9bed1b55898c"
      },
      "value": "Data from Network Shared Drive"
    },
    {
      "description": "DLLs that are specified in the AppInit_DLLs value in the Registry key <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program. This value can be abused to obtain persistence by causing a DLL to be loaded into most processes on the computer.[[Citation: AppInit Registry]]\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.[[Citation: AppInit Secure Boot]]\n\nDetection: Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.[[Citation: TechNet Autoruns]] \n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for [[Command and Control]], learning details about the environment through [[Discovery]], and conducting [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Loaded DLLs, Process monitoring, Windows Registry\n\nEffective Permissions: Administrator, SYSTEM",
      "meta": {
        "mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1103",
          "https://support.microsoft.com/en-us/kb/197571",
          "https://msdn.microsoft.com/en-us/library/dn280412",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "317fefa6-46c7-4062-adb6-2008cf6bcb41"
      },
      "value": "AppInit DLLs"
    },
    {
      "description": "Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[[Citation: Wikipedia OSI]] Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), and transport layer protocols, such as the User Datagram Protocol (UDP).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;[[Citation: Microsoft ICMP]] however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\n\nDetection: Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X",
      "meta": {
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1095",
          "http://support.microsoft.com/KB/170292",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "c21d5a77-d422-4a69-acd7-2c53c1faa34b"
      },
      "value": "Standard Non-Application Layer Protocol"
    },
    {
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UT-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism[[Citation: Sofacy Komplex Trojan]].\n\nDetection: File system monitoring can determine if plist files are being modified. Users should not have permission to modify these in most cases. Some software tools like \"Knock Knock\" can detect persistence mechanisms and point to the specific files that are being referenced. This can be helpful to see what is actually being executed.\n\nMonitor process execution for abnormal process execution resulting from modified plist files. Monitor utilities used to modify plist files or that take a plist file as an argument, which may indicate suspicious activity.\n\nPlatforms: MacOS, OS X\n\nData Sources: File monitoring, Process Monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process Monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1150",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/"
        ],
        "uuid": "26a5fec2-2159-4dea-aa9f-8dafa90976ab"
      },
      "value": "Plist Modification"
    },
    {
      "description": "Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.[[Citation: TechNet Netsh]] The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another [[Persistence]] technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe.[[Citation: Demaske Netsh Persistence]]\n\nProof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs.[[Citation: Github Netsh Helper CS Beacon]]\n\nDetection: It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code> registry key for any new or suspicious entries that do not correlate with known system files or benign software.[[Citation: Demaske Netsh Persistence]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: DLL monitoring, Windows Registry, Process monitoring\n\nContributors: Matthew Demaske, Adaptforward",
      "meta": {
        "mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1128",
          "https://technet.microsoft.com/library/bb490939.aspx",
          "https://github.com/outflankbv/NetshHelperBeacon",
          "https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html"
        ],
        "uuid": "bb0e0cb5-f3e4-4118-a4cb-6bf13bfbc9f2"
      },
      "value": "Netsh Helper DLL"
    },
    {
      "description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.\n\nDetection: Collect events that correlate with changes to account objects on systems and the domain, such as event ID 4738.[[Citation: Microsoft User Modified Event]] Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems.\n\nUse of credentials may also occur at unusual times or to unusual systems or services and may correlate with other suspicious activity.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs, API monitoring, Windows event logs",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs",
          "API monitoring",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1098",
          "https://docs.microsoft.com/windows/device-security/auditing/event-4738"
        ],
        "uuid": "a10641f4-87b4-45a3-a906-92a149cb2c27"
      },
      "value": "Account Manipulation"
    },
    {
      "description": "Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Net.\n\n===Mac===\n\nSpecific to Mac, the <code>bonjour</code> protocol to discover additional Mac-based systems within the same broadcast domain. Utilities such as \"ping\" and others can be used to gather information about remote systems.\n\n===Linux===\n\nUtilities such as \"ping\" and others can be used to gather information about remote systems.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, MacOS, OS X\n\nData Sources: Network protocol analysis, Process monitoring, Process use of network, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Network protocol analysis",
          "Process monitoring",
          "Process use of network",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1018"
        ],
        "uuid": "e358d692-23c0-4a31-9eb6-ecc13a8d7735"
      },
      "value": "Remote System Discovery"
    },
    {
      "description": "Adversaries may attempt to find local system or domain-level groups and permissions settings. \n\n===Windows===\n\nExamples of commands that can list groups are <code>net group /domain</code> and <code>net localgroup</code> using the Net utility.\n\n===Mac===\n\nOn Mac, this same thing can be accomplished with the <code>dscacheutil -q group</code> for the domain, or <code>dscl . -list /Groups</code> for local groups.\n\n===Linux===\n\nOn Linux, local groups can be enumerated with the <code>groups</code> command and domain groups via the <code>ldapsearch</code> command.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: API monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1069"
        ],
        "uuid": "15dbf668-795c-41e6-8219-f0447c0e64ce"
      },
      "value": "Permission Groups Discovery"
    },
    {
      "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools.[[Citation: Trend Micro APT Attack Tools]]\n\nDetection: It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: File monitoring, Process command-line parameters, Binary file metadata\n\nContributors: Walker Johnson",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1107",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"
        ],
        "uuid": "56fca983-1cf1-4fd1-bda0-5e170a37ab59"
      },
      "value": "File Deletion"
    },
    {
      "description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.DLL Search Order Hijacking.\n\nDetection: Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. \n\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [[Command and Control]], learning details about the environment through [[Discovery]], and [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1034",
          "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
          "http://technet.microsoft.com/en-us/library/cc723564.aspx#XSLTsection127121120120",
          "https://blogs.technet.microsoft.com/srd/2014/04/08/ms14-019-fixing-a-binary-hijacking-via-cmd-or-bat-file/",
          "http://support.microsoft.com/KB/103000",
          "https://msdn.microsoft.com/en-us/library/fd7hxfdd.aspx",
          "http://msdn.microsoft.com/en-us/library/ms682425",
          "http://msdn.microsoft.com/en-us/library/ms687393"
        ],
        "uuid": "c4ad009b-6e13-4419-8d21-918a1652de02"
      },
      "value": "Path Interception"
    },
    {
      "description": "Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies[[Citation: Writing Bad Malware for OSX]]. There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time[[Citation: Malware Persistence on OS X]].\n\nDetection: Monitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.\n\nPlatforms: MacOS, OS X\n\nData Sources: Binary file metadata, Process Monitoring, Process command-line parameters, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "Binary file metadata",
          "Process Monitoring",
          "Process command-line parameters",
          "File monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1161",
          "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
          "https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf"
        ],
        "uuid": "b75b398b-65fb-4578-a9b6-847dd9d0cf52"
      },
      "value": "LC_LOAD_DYLIB Addition"
    },
    {
      "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).[[Citation: MTrends 2016]]\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n===Master Boot Record===\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.[[Citation: Lau 2011]]\n\n===Volume Boot Record===\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\n\nDetection: Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10\n\nData Sources: API monitoring, MBR, VBR",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "MBR",
          "VBR"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1067",
          "https://www.fireeye.com/content/dam/fireeye-www/regional/fr%20FR/offers/pdfs/ig-mtrends-2016.pdf",
          "http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion"
        ],
        "uuid": "02fefddc-fb1b-423f-a76b-7552dd211d4d"
      },
      "value": "Bootkit"
    },
    {
      "description": "Adversaries may delete or alter generated event files on a host system, including potentially captured files such as quarantined malware. This may compromise the integrity of the security solution, causing events to go unreported, or make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.\n\nDetection: File system monitoring may be used to detect improper deletion or modification of indicator files. Events not stored on the file system will require different detection mechanisms.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1070"
        ],
        "uuid": "799ace7f-e227-4411-baa0-8868704f2a69"
      },
      "value": "Indicator Removal on Host"
    },
    {
      "description": "Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <code>~/Library/Preferences/com.apple.loginwindow.plist</code> and <code>~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist</code>. \n\nAn adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine[[Citation: Methods of Mac Malware Persistence]].\n\nDetection: Monitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.\n\nPlatforms: MacOS, OS X",
      "meta": {
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1164",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ],
        "uuid": "0ed9e79b-293a-41aa-ae4c-10d74fd95ba6"
      },
      "value": "Re-opened Applications"
    },
    {
      "description": "Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.\n\nDetection: Processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a mouse click or key press) but access the network without such may be malicious.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: User interface, Process monitoring\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "mitre_data_sources": [
          "User interface",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1011"
        ],
        "uuid": "51ea26b1-ff1e-4faa-b1a0-1114cd298c87"
      },
      "value": "Exfiltration Over Other Network Medium"
    },
    {
      "description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Command-Line Interface, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.\n\nDetection: Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1005"
        ],
        "uuid": "3c4a2599-71ee-4405-ba1e-0e28414b4bc5"
      },
      "value": "Data from Local System"
    },
    {
      "description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).Redundant Access or as a persistence mechanism in case an adversary's primary access methods are detected and removed.\n\nDetection: Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:cmd or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.[[Citation: US-CERT Alert TA15-314A Web Shells]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process monitoring, Authentication logs, Netflow/Enclave netflow, Anti-virus\n\nEffective Permissions: User, SYSTEM",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Anti-virus"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1100",
          "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html",
          "https://www.us-cert.gov/ncas/alerts/TA15-314A"
        ],
        "uuid": "c16e5409-ee53-4d79-afdc-4099dc9292df"
      },
      "value": "Web Shell"
    },
    {
      "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions.Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, Services, Process command-line parameters\n\nEffective Permissions: SYSTEM",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "Services",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1058",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://msdn.microsoft.com/library/windows/desktop/ms724878.aspx"
        ],
        "uuid": "39a130e1-6ab7-434a-8bd2-418e7d9d6427"
      },
      "value": "Service Registry Permissions Weakness"
    },
    {
      "description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$</code>, <code>ADMIN$</code>, and <code>IPC$</code>. \n\nAdversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over server message block (SMB)Scheduled Task, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.Net utility can be used to connect to Windows admin shares on remote systems using <code>net use</code> commands with valid credentials.Net, on the command-line interface and [[Discovery]] techniques that could be used to find remotely accessible systems.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process use of network, Authentication logs, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process use of network",
          "Authentication logs",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1077",
          "http://support.microsoft.com/kb/314984",
          "https://technet.microsoft.com/en-us/library/cc787851.aspx",
          "https://en.wikipedia.org/wiki/Server%20Message%20Block",
          "http://blogs.technet.com/b/jepayne/archive/2015/11/27/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts.aspx",
          "https://technet.microsoft.com/bb490717.aspx",
          "http://blogs.technet.com/b/jepayne/archive/2015/11/24/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem.aspx"
        ],
        "uuid": "ffe742ed-9100-4686-9e00-c331da544787"
      },
      "value": "Windows Admin Shares"
    },
    {
      "description": "Winlogon is a part of some Windows versions that performs actions at logon. In Windows systems prior to Windows Vista, a Registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup for persistence.\n\nDetection: Monitor for changes to registry entries in <code>HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify</code> that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.[[Citation: TechNet Autoruns]]  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.\n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [[Command and Control]], learning details about the environment through [[Discovery]], and [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows XP, Windows Server 2003 R2\n\nData Sources: Windows Registry, File monitoring, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows XP",
          "Windows Server 2003 R2"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1004",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ],
        "uuid": "514ede4c-78b3-4d78-a38b-daddf6217a79"
      },
      "value": "Winlogon Helper DLL"
    },
    {
      "description": "Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\n===Windows===\n\nFile sharing over a Windows network occurs over the SMB protocol.Net can be used to query a remote system for available shared drives using the <code>net view \\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>.\n\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows 10, Windows 7, Windows 8, Windows 8.1, Windows Server 2012, Windows Server 2008 R2, Windows Server 2012 R2, Windows Server 2003, Windows Server 2008, Windows XP, Windows Server 2003 R2, Windows Vista, MacOS, OS X\n\nData Sources: Process Monitoring, Process command-line parameters, Network protocol analysis, Process use of network",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring",
          "Process command-line parameters",
          "Network protocol analysis",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows 10",
          "Windows 7",
          "Windows 8",
          "Windows 8.1",
          "Windows Server 2012",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows XP",
          "Windows Server 2003 R2",
          "Windows Vista",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1135",
          "https://en.wikipedia.org/wiki/Shared%20resource",
          "https://technet.microsoft.com/library/cc770880.aspx"
        ],
        "uuid": "68cc93f6-58ca-413b-92ae-2d0a65ed6e52"
      },
      "value": "Network Share Discovery"
    },
    {
      "description": "An adversary may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nDetection: Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through [[Discovery]] techniques prior to attempting [[Lateral Movement]].\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Authentication logs",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1021"
        ],
        "uuid": "54a649ff-439a-41a4-9856-8d144a2551ba"
      },
      "value": "Remote Services"
    },
    {
      "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.[[Citation: Tilbury 2014]]\n\nFor the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges.[[Citation: Tilbury 2014]]\n\nOther accessibility features exist that may also be leveraged in a similar fashion:[[Citation: DEFCON2016 Sticky Keys]]\n\n*On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n*Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n*Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n*Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n*App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>\n\nDetection: Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options</code>.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, File monitoring, Process monitoring\n\nEffective Permissions: SYSTEM\n\nContributors: Paul Speulstra, AECOM Global Security Operations Center",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1015",
          "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
          "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom",
          "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html"
        ],
        "uuid": "9b99b83a-1aac-4e29-b975-b374950551a3"
      },
      "value": "Accessibility Features"
    },
    {
      "description": "Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nDetection: Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to [[Command and Control]] and possible network [[Discovery]] techniques.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1080"
        ],
        "uuid": "246fd3c7-f5e3-466d-8787-4c13d9e3b61c"
      },
      "value": "Taint Shared Content"
    },
    {
      "description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services.\n\nAdversaries may use remote services to access and persist within a network.Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as part of Redundant Access during an operation.\n\nDetection: Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Authentication logs\n\nContributors: Daniel Oakley",
      "meta": {
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1133",
          "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
        ],
        "uuid": "10d51417-ee35-4589-b1ff-b6df1c334e8d"
      },
      "value": "External Remote Services"
    },
    {
      "description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nDetection: Monitor application deployments from a secondary system. Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1017"
        ],
        "uuid": "327f3cc5-eea1-42d4-a6cd-ed34b7ce8f61"
      },
      "value": "Application Deployment Software"
    },
    {
      "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of Scripting to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Remote File Copy to identify and move files.\n\nDetection: Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as Data Staged. As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Data loss prevention, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Data loss prevention",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1119"
        ],
        "uuid": "30208d3e-0d6b-43c8-883e-44462a514619"
      },
      "value": "Automated Collection"
    },
    {
      "description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n[[Citation: Graeber 2014]]\n\nDetection: Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.[[Citation: Graeber 2014]][[Citation: Microsoft Configure LSA]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: DLL monitoring, Windows Registry, Loaded DLLs",
      "meta": {
        "mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1101",
          "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
          "https://technet.microsoft.com/en-us/library/dn408187.aspx"
        ],
        "uuid": "6c174520-beea-43d9-aac6-28fb77f3e446"
      },
      "value": "Security Support Provider"
    },
    {
      "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.\n\nDetection: Correlating a user session with a distinct lack of new commands in their <code>.bash_history</code> can be a clue to suspicious behavior. Additionally, users checking or changing their <code>HISTCONTROL</code> environment variable is also suspicious.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: Process Monitoring, Authentication logs, File monitoring, Environment variable",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring",
          "Authentication logs",
          "File monitoring",
          "Environment variable"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1148"
        ],
        "uuid": "b2a23bbd-1a12-4e1e-a985-b0cad55a5c91"
      },
      "value": "HISTCONTROL"
    },
    {
      "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.\n\nDetection: Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1085"
        ],
        "uuid": "62b8c999-dcc0-4755-bd69-09442d9359f5"
      },
      "value": "Rundll32"
    },
    {
      "description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n\nUser credentials may be sent over an insecure, unencrypted protocol that can be captured and obtained through network packet analysis. An adversary may place a network interface into promiscuous mode, using a utility to capture traffic in transit over the network or use span ports to capture a larger amount of data. In addition, Address Resolution Protocol (ARP) and Domain Name Service (DNS) poisoning can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nDetection: Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Network device logs, Host network interface, Netflow/Enclave netflow",
      "meta": {
        "mitre_data_sources": [
          "Network device logs",
          "Host network interface",
          "Netflow/Enclave netflow"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1040"
        ],
        "uuid": "3257eb21-f9a7-4430-8de1-d8b6e288f529"
      },
      "value": "Network Sniffing"
    },
    {
      "description": "A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.[[Citation: AddMonitor]] This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot.[[Citation: Bloxham]] Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>.[[Citation: Bloxham]] The spoolsv.exe process also runs under SYSTEM level permissions.\n\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.\n\nDetection: * Monitor process API calls to AddMonitor.\n* Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal.\n* New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious.\n* Monitor registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>.\n* Run the Autoruns utility, which checks for this Registry key as a persistence mechanism[[Citation: TechNet Autoruns]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, API monitoring, DLL monitoring, Windows Registry, Process monitoring\n\nEffective Permissions: SYSTEM\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "API monitoring",
          "DLL monitoring",
          "Windows Registry",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1013",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "http://msdn.microsoft.com/en-us/library/dd183341",
          "https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf"
        ],
        "uuid": "1f47e2fd-fa77-4f2f-88ee-e85df308f125"
      },
      "value": "Local Port Monitor"
    },
    {
      "description": "The <code>source</code> command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways <code>source /path/to/filename [arguments]</code> or <code>. /path/to/filename [arguments]</code>. Take note of the space after the \".\". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment. \n\nAdversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.\n\nDetection: Monitor for command shell execution of source and subsequent processes that are started as a result of being executed by a source command. Adversaries must also drop a file to disk in order to execute it with source, and these files can also detected by file monitoring.\n\nPlatforms: Linux, MacOS, OS X\n\nData Sources: Process Monitoring, File monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring",
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1153"
        ],
        "uuid": "d1be72cb-6893-4ca4-82d2-0c58f7dafde4"
      },
      "value": "Source"
    },
    {
      "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,[[Citation: Wikipedia Exe Compression]] but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\n\nDetection: Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1045",
          "http://en.wikipedia.org/wiki/Executable%20compression"
        ],
        "uuid": "6ff403bc-93e3-48be-8687-e102fdba8c88"
      },
      "value": "Software Packing"
    },
    {
      "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.\n\nIn Mac, this can be done natively with a small AppleScript script.\n\nDetection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, MacOS, OS X\n\nData Sources: API monitoring, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1010"
        ],
        "uuid": "4ae4f953-fe58-4cc8-a327-33257e30a830"
      },
      "value": "Application Window Discovery"
    },
    {
      "description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware.Rootkit functionality to hide its existence from the guest operating system.[[Citation: Myers 2007]] A malicious hypervisor of this nature could be used to persist on systems through interruption.\n\nDetection: Type-1 hypervisors may be detected by performing timing analysis. Hypervisors emulate certain CPU instructions that would normally be executed by the hardware. If an instruction takes orders of magnitude longer to execute than normal on a system that should not contain a hypervisor, one may be present.[[Citation: virtualization.info 2006]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: System calls",
      "meta": {
        "mitre_data_sources": [
          "System calls"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1062",
          "https://en.wikipedia.org/wiki/Hypervisor",
          "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.8832&rep=rep1&type=pdf",
          "http://en.wikipedia.org/wiki/Xen",
          "http://virtualization.info/en/news/2006/08/debunking-blue-pill-myth.html"
        ],
        "uuid": "4be89c7c-ace6-4876-9377-c8d54cef3d63"
      },
      "value": "Hypervisor"
    },
    {
      "description": "Credential dumping is the process of obtaining account login and password information from the operating system and software. Credentials can be used to perform Windows Credential Editor, Mimikatz, and gsecdump. These tools are in use by both professional security testers and adversaries.\n\nPlaintext passwords can be obtained using tools such as Mimikatz to extract passwords stored by the Local Security Authority (LSA). If smart cards are used to authenticate to a domain using a personal identification number (PIN), then that PIN is also cached as a result and may be dumped.Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective DLL Injection to reduce potential indicators of malicious activity.\n\nNTLM hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well. \n\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\n\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,[[Citation: Powersploit]] which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: API monitoring, Process monitoring, PowerShell logs, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "PowerShell logs",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1003",
          "https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa",
          "https://github.com/mattifestation/PowerSploit"
        ],
        "uuid": "0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22"
      },
      "value": "Credential Dumping"
    },
    {
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.\n\nPopular websites and social media can act as a mechanism for command and control and give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nDetection: Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Host network interface, Netflow/Enclave netflow, Network protocol analysis, Packet capture",
      "meta": {
        "mitre_data_sources": [
          "Host network interface",
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1102",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "830c9528-df21-472c-8c14-a036bf17d665"
      },
      "value": "Web Service"
    },
    {
      "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Windows Registry, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1012",
          "https://en.wikipedia.org/wiki/Windows%20Registry"
        ],
        "uuid": "c32f7008-9fea-41f7-8366-5eb9b74bd896"
      },
      "value": "Query Registry"
    },
    {
      "description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.\n\nAdversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nDetection: Detection methods will vary depending on the type of third-party software or system and how it is typically used. \n\nThe same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. \n\nOften these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious.\n\nPerform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Third-party application logs, Windows Registry, Process monitoring, Process use of network, Binary file metadata",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Third-party application logs",
          "Windows Registry",
          "Process monitoring",
          "Process use of network",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1072"
        ],
        "uuid": "92a78814-b191-47ca-909c-1ccfe3777414"
      },
      "value": "Third-party Software"
    },
    {
      "description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.\n\nAdversaries may also copy files laterally between internal victim systems to support Windows Admin Shares or Remote Desktop Protocol.\n\nDetection: Monitor for file creation and files transferred within a network over SMB. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: File monitoring, Packet capture, Process use of network, Netflow/Enclave netflow, Network protocol analysis, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Packet capture",
          "Process use of network",
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1105",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "e6919abc-99f9-4c6c-95a5-14761e7b2add"
      },
      "value": "Remote File Copy"
    },
    {
      "description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.PowerShell, additional logging of PowerShell scripts is recommended.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: API monitoring",
      "meta": {
        "mitre_data_sources": [
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1006",
          "https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1",
          "http://www.codeproject.com/Articles/32169/FDump-Dumping-File-Sectors-Directly-from-Disk-usin"
        ],
        "uuid": "0c8ab3eb-df48-4b9c-ace7-beacaac81cc5"
      },
      "value": "File System Logical Offsets"
    },
    {
      "description": "Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.\n\nThis mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited.\n\nDetection: Use file and process monitoring to detect when files are written to a Web server by a process that is not the normal Web server process or when files are written outside of normal administrative time periods. Use process monitoring to identify normal processes that run on the Web server and detect processes that are not typically executed.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: File monitoring, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1051"
        ],
        "uuid": "804c042c-cfe6-449e-bc1a-ba0a998a70db"
      },
      "value": "Shared Webroot"
    },
    {
      "description": "An adversary may attempt to block indicators or events from leaving the host machine. In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process or creating a host-based firewall rule to block traffic to a specific server.\n\nDetection: Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.\n\nDepending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Sensor health and status, Process monitoring, Process command-line parameters",
      "meta": {
        "mitre_data_sources": [
          "Sensor health and status",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1054"
        ],
        "uuid": "6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df"
      },
      "value": "Indicator Blocking"
    },
    {
      "description": "When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task. Adversaries can mimic this functionality to prompt users for credentials with a normal-looking prompt. This type of prompt can be accomplished with AppleScript:\n\n<code>set thePassword to the text returned of (display dialog \"AdobeUpdater needs permission to check for updates. Please authenticate.\" default answer \"\")</code>\n[[Citation: OSX Keydnap malware]]\n\nAdversaries can prompt a user for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[[Citation: OSX Malware Exploits MacKeeper]]\n\nDetection: This technique exploits users' tendencies to always supply credentials when prompted, which makes it very difficult to detect. Monitor process execution for unusual programs as well as AppleScript that could be used to prompt users for credentials.\n\nPlatforms: MacOS, OS X\n\nData Sources: User interface, Process Monitoring",
      "meta": {
        "mitre_data_sources": [
          "User interface",
          "Process Monitoring"
        ],
        "mitre_platforms": [
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1141",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
          "https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html"
        ],
        "uuid": "cbd1028b-eeac-40bd-b86e-0430f4e127a9"
      },
      "value": "Input Prompt"
    },
    {
      "description": "In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.\n\nDetection: Monitor file access on removable media. Detect processes that execute when removable media are mounted.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10, MacOS, OS X\n\nData Sources: Data loss prevention, File monitoring",
      "meta": {
        "mitre_data_sources": [
          "Data loss prevention",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1052"
        ],
        "uuid": "e6415f09-df0e-48de-9aba-928c902b7549"
      },
      "value": "Exfiltration Over Physical Medium"
    },
    {
      "description": "The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>.Scheduled Task[[Citation: RSA EU12 They're Inside]], or to discover locality information based on time zone to assist in victim targeting.\n\nDetection: Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process monitoring, Process command-line parameters, API monitoring",
      "meta": {
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1124",
          "https://technet.microsoft.com/windows-server-docs/identity/ad-ds/get-started/windows-time-service/windows-time-service-tools-and-settings",
          "https://msdn.microsoft.com/ms724961.aspx",
          "https://www.rsaconference.com/writable/presentations/file%20upload/ht-209%20rivner%20schwartz.pdf"
        ],
        "uuid": "f3c544dc-673c-4ef3-accb-53229f1ae077"
      },
      "value": "System Time Discovery"
    },
    {
      "description": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API.[[Citation: Wikipedia Windows Library Files]]\n\nThe module loader can load DLLs:\n\n*via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n*via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n*via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n*via <code><file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"></code> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries can use this functionality as a way to execute arbitrary code on a system.\n\nDetection: Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to <code>%SystemRoot%</code> and <code>%ProgramFiles%</code> directories will protect against module loads from unsafe paths. \n\nCorrelation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: Process Monitoring, API monitoring, File monitoring, DLL monitoring\n\nContributors: Stefan Kanthak",
      "meta": {
        "mitre_data_sources": [
          "Process Monitoring",
          "API monitoring",
          "File monitoring",
          "DLL monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1129",
          "https://en.wikipedia.org/wiki/Microsoft%20Windows%20library%20files"
        ],
        "uuid": "0a5231ec-41af-4a35-83d0-6bdf11f28c65"
      },
      "value": "Execution through Module Load"
    },
    {
      "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.[[Citation: Wikipedia Root Certificate]] Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.[[Citation: Operation Emmental]]\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications.[[Citation: Kaspersky Superfish]]\n\nDetection: A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Linux, Windows 10\n\nData Sources: SSL/TLS inspection, Digital Certificate Logs\n\nContributors: Itzik Kotler, SafeBreach",
      "meta": {
        "mitre_data_sources": [
          "SSL/TLS inspection",
          "Digital Certificate Logs"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Linux",
          "Windows 10"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1130",
          "https://en.wikipedia.org/wiki/Root%20certificate",
          "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf",
          "https://usblog.kaspersky.com/superfish-adware-preinstalled-on-lenovo-laptops/5161/"
        ],
        "uuid": "d519cfd5-f3a8-43a9-a846-ed0bb40672b1"
      },
      "value": "Install Root Certificate"
    },
    {
      "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.\n\nDetection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.[[Citation: University of Birmingham C2]]\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10, Linux, MacOS, OS X\n\nData Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
      "meta": {
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows Server 2003",
          "Windows Server 2008",
          "Windows Server 2012",
          "Windows XP",
          "Windows 7",
          "Windows 8",
          "Windows Server 2003 R2",
          "Windows Server 2008 R2",
          "Windows Server 2012 R2",
          "Windows Vista",
          "Windows 8.1",
          "Windows 10",
          "Linux",
          "MacOS",
          "OS X"
        ],
        "refs": [
          "https://attack.mitre.org/wiki/Technique/T1030",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ],
        "uuid": "c3888c54-775d-4b2f-b759-75a2ececcbfd"
      },
      "value": "Data Transfer Size Limits"
    }
  ],
  "version": 4
}
